{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Some of my Arduino Projects\n\n\nThis page is to kind of show what can be done with very simple \"mark-down\" langage. \n\n\nSo here is a picture....\n\n\n\nI have learned enough about mardown to make some simple sites, with pictures, links, etc. How I learned was from markdown and \nmkdocs\n\n\nCommands\n\n\nThese are some common things that you need to know if you use mkdocs.\nWhich makes life easy!\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\nmkdocs gh-deploy --clean\n - deploy documents to github.\n\n\n\n\nYou can even do a different style of bullets:\n\n\n1. Different Style of Bullets.\n2. Are you Sure? - Yup I think they are.\n3. I don't know - Me either.\n\n\n\nProject layout\n\n\nThis is some more information about mkdocs and how it's simple to add and layout new files.\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nAnd now for the pictures\n\n\nAnd just to prove that pictures are easy to add.....\n\n\n!\n\n\n\n\n\nCheckout \nebay\n\n\nKD8BXP Made This", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-some-of-my-arduino-projects", 
            "text": "This page is to kind of show what can be done with very simple \"mark-down\" langage.   So here is a picture....  I have learned enough about mardown to make some simple sites, with pictures, links, etc. How I learned was from markdown and  mkdocs", 
            "title": "Welcome to Some of my Arduino Projects"
        }, 
        {
            "location": "/#commands", 
            "text": "These are some common things that you need to know if you use mkdocs.\nWhich makes life easy!   mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.  mkdocs gh-deploy --clean  - deploy documents to github.   You can even do a different style of bullets:  1. Different Style of Bullets.\n2. Are you Sure? - Yup I think they are.\n3. I don't know - Me either.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "This is some more information about mkdocs and how it's simple to add and layout new files.  mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/#and-now-for-the-pictures", 
            "text": "And just to prove that pictures are easy to add.....  !   Checkout  ebay", 
            "title": "And now for the pictures"
        }, 
        {
            "location": "/#kd8bxp-made-this", 
            "text": "", 
            "title": "KD8BXP Made This"
        }, 
        {
            "location": "/selfbalancingrobot/", 
            "text": "Self Balancing Robot and the MPU 6050 Accelerometer/gyroscope\n\n\nFor now I'm just going to put up some links to the project I was trying to duplicate.\n\n\nDuplicating failed, but I know why - The guy didn't make it very clear how things are/were hooked up, but he did explain how a self balancing robot worked pretty good, so links are needed.\n\n\nHis code is/was written for the old IDE which of course caused some problems, they were pretty easy to fix. But in the long run it wasn't worth fixing since it didn't work with the hardware I got.  From what I have read there are dozens of variations on the MPU 6050 Accelerometer/gyroscope, and getting the raw data off them is easy, getting usable data each one deals with that differently.\n\n\nSo while he was using a MPU6050 - it wasn't the same as the one I got my hands on, and works a lot different.\n\n\nHe code was documented so poorly thou I couldn't make heads or tails out of what he was doing.\n\n\nSo - as it stands right now, my self balancing robot project is on hold.\n\n\nhttp://www.transistor.io/balancing-robot.html\n\n\n(It looks like he went thur 2 or 3 different versions of this robot, which maybe where some of the confusion comes from as well)\n\n\nSame guy - these are the 3D files used to print it out\u2026.and his idea of using a dowel rod worked pretty well.  I didn't make my own \"shield\" opting for the motor/sensor shield I already had, the UNO board 3D print turned out really nice, and could be used just as mount for a UNO board.\n\n\nhttp://www.thingiverse.com/thing:25531/#instructions\n\n\nHere is his code:\n\n\nhttps://github.com/jdorweiler/BalancingRobot\n\n\nThe Good Information he points to - really was good information it lead me to the point of how many different models of the MPU6050 there are.\n\n\nThe code in the GOOD information didn't work either thou, and was written for a different gyroscope\n\n\nhttp://forum.arduino.cc/index.php/topic,8871.0.html\n\n\nKerry Wong - has a lot of information about the science behind a self balancing thing, which is probably good to know. (There is no code that I saw on the site, but a lot of math, and theory)\n\n\nhttp://www.kerrywong.com/2012/03/08/a-self-balancing-robot-i/\n\n\nmrfid72 (Youtube name) - came up with a different self balancing robot, which is a lot closer to the one I built, so I figured I'd give his code a try, and I got spinning servos, I think he is using yet another MPU6050 that looks like mine, but works differently.\n\n\nhttps://www.youtube.com/watch?v=cC6nE2-NZao\n\n\n(Or it could be that his code gave some errors in the math as it was compiling, that I think I fixed, but I may have fixed it the wrong direction)\n\n\nFinally I came across this guys code: He is using a MPU6050 and servo motor, it looks like he also has some potentiometers hooked up. It looks to like he is only using one motor (?)\n\n\nI just found the code, I didn't find any pictures of his robot, video, or wiring diagrams.\n\n\nBut his code was giving out results from the gryoscope in the serial monitor.  Also, when I did hook one motor up to his output pin, and I tilted the robot from side to side, the wheel would speed up or slow down.  So I think his is the closest yet in terms of working with the MPU6050 I have.\n\n\nhttps://github.com/ericouyang/arduino_examples/blob/master/Balancing_Robot/balancing_robot.ino\n\n\nThe next step I think is to print out, or go line by line at the two peice of codes that almost work, and see if I can't jam them together and get the results needed to make this thing work.\n\n\nThe MPU6050 -\n\n\nThere is actually quite a bit of information out there about this, but this tutorial was one I found to be a bit better then others.  He does kind of hit on there being a lot of variations, but doesn't go into that in a whole lot of detail.\n\n\nThe MPU6050 is an I2C device, that needs some special codes to make it work and do what it should do, and getting the raw (more or less unusable) data out of it is easy. Getting usable data out of it not so much due to the different variations and firmwares. And even different breakout boards label pins differently.\n\n\nhttp://diyhacking.com/arduino-mpu-6050-imu-sensor-tutorial/\n\n\nThe MPU-6050 can be found on eBay for about $2 dollars - it is a 6DOF 3 Axis Gyroscope and Accelerometer - and from what I have read it is very accurate, but not so easy to use.\n\n\nmrfid72 (Youtube name) - I was able to get his code to work, at least to the point that I can say my Robot is balancing itself.\n\n\nhttps://www.youtube.com/watch?v=cC6nE2-NZao\n\n\nHis robot is the closest robot I have found to the one I built, but quite a bit of the math had to be changed in the original code. And I'm not sure if the changes I made are 100% right or not, they have to be getting close.", 
            "title": "Self Balancing Robot"
        }, 
        {
            "location": "/readme/", 
            "text": "Chatter Bot\n\n\nInstallation\n\n\nSimple fun chatter bot. \n1) Head from a Wowwee Tri-bot\n2) Catalex Uart MP3 player \n3) Arduino UNO or the like\n4) amplified speaker for the MP3 player\n\n\nFrom the Tri-Bot Head, purple wire is connected to 3.3v\nusing a ground wire I tested the other wires to figure out which does what.\nI am only using the center mouth led, and the 2 eye leds in this project.\nThere are also 2 ear leds, a white led (headlamp), and 2 more mouth leds.\nThere is a motor that will pop the headlamp and ears out.\nThis motor will also bring them all back into the head. \n\n\nYou need to find some jokes or some random stuff for your chat bot to just\nmindless say.  For mine I found some Star Wars jokes. Used a Text to Speech program, I made\na WAV file, and converted that file to a MP3. \nThe MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not\nany way synchronized to the sound, it just flashes the mouth.\n\n\nThings To Do\n\n\nadd other mouth LEDs.\nmake it play more than one MP3 file or repeat the MP3 over and over again.\n\n\nUsage\n\n\nTODO: Write usage instructions\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nLeRoy Miller (2015) and Catalex (unknown data)\nmost of the software is for the mp3 and based off the Catalex sketches.\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \nhttp://www.gnu.org/licenses", 
            "title": "Chatter Bot Readme"
        }, 
        {
            "location": "/readme/#chatter-bot", 
            "text": "", 
            "title": "Chatter Bot"
        }, 
        {
            "location": "/readme/#installation", 
            "text": "Simple fun chatter bot. \n1) Head from a Wowwee Tri-bot\n2) Catalex Uart MP3 player \n3) Arduino UNO or the like\n4) amplified speaker for the MP3 player  From the Tri-Bot Head, purple wire is connected to 3.3v\nusing a ground wire I tested the other wires to figure out which does what.\nI am only using the center mouth led, and the 2 eye leds in this project.\nThere are also 2 ear leds, a white led (headlamp), and 2 more mouth leds.\nThere is a motor that will pop the headlamp and ears out.\nThis motor will also bring them all back into the head.   You need to find some jokes or some random stuff for your chat bot to just\nmindless say.  For mine I found some Star Wars jokes. Used a Text to Speech program, I made\na WAV file, and converted that file to a MP3. \nThe MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not\nany way synchronized to the sound, it just flashes the mouth.", 
            "title": "Installation"
        }, 
        {
            "location": "/readme/#things-to-do", 
            "text": "add other mouth LEDs.\nmake it play more than one MP3 file or repeat the MP3 over and over again.", 
            "title": "Things To Do"
        }, 
        {
            "location": "/readme/#usage", 
            "text": "TODO: Write usage instructions", 
            "title": "Usage"
        }, 
        {
            "location": "/readme/#contributing", 
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request", 
            "title": "Contributing"
        }, 
        {
            "location": "/readme/#credits", 
            "text": "LeRoy Miller (2015) and Catalex (unknown data)\nmost of the software is for the mp3 and based off the Catalex sketches.", 
            "title": "Credits"
        }, 
        {
            "location": "/readme/#license", 
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see  http://www.gnu.org/licenses", 
            "title": "License"
        }, 
        {
            "location": "/rfid-rc522/", 
            "text": "RFID RC-522\n\n\nNOTHING TO SEE YET, but check back soon!", 
            "title": "Mifare RFID reader RC522"
        }, 
        {
            "location": "/rfid-rc522/#rfid-rc-522", 
            "text": "NOTHING TO SEE YET, but check back soon!", 
            "title": "RFID RC-522"
        }, 
        {
            "location": "/fs1000a/", 
            "text": "FS1000a 315/433mhz RX/TX pair\n\n\nFeb 27, 2014\nInitial tests of FS1000a 315mhz RX/TX pair:\nThis \ndocument seems\n to be relevant to these transmit and receivers.\n\n\nAnd the library can be found \nhere\n\n\nThe library contains the sketches found on the page, with the exception that they don\u2019t set the\nRX or TX pin\nvw_set_tx_pin(3);\nvw_set_rx_pin(3);\nAlso the receiver sketch seems to be a bit different - the example in the library prints out HEX\ncodes.\nfor the most part these are very simple to use - one Arduino is setup to send information, the\nother is setup to receive that information - and do something with it.\nModulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for\ndata So it has some of the same weaknesses and strengths of AM. \nFor more information\n\n\nFinding a distance for them was a little harder, but as near as I can figure\n40 meters or 131 feet indoors, 100 meters or 328 feet in the open.\nI tested at about 60 feet inside and it worked without a problem.\nRange seems to be dependant on how much voltage you put on the transmitter - from what I\nfound the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust\n12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the\nsame board we have. Better to be safe then sorry and go with 5v.\nLike finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say\nbetween 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant\non distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The\nsites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as\nreading sensor data.\nImpressions of this it would make a good low power data sender for a remote sensor, only takes\nup one pin, and is really simple to use.\nOther information (But not sure if the RX/TX board are the same as what we have):\n\nSpark Fun\n\n\nSeeed Studio\n - Pretty Sure this the board I have\n\nAnother Seeed Studio\n\n\nUpdate: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some\nquirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that\nis. (Found this out by trying to send a tempature variable floating point to it)\nand the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards.\n(have been trying for the past 2 hours to get the library to work with my Squarewear, wearable\ntemperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the\nsquarewear is not an Arduino, it is closely related to one.\nPlans this weekend, try some alternative methods of getting these RF devices to work.\n\n\nKD8BXP Made This", 
            "title": "FS1000a 433Mhz Transmitters"
        }, 
        {
            "location": "/fs1000a/#fs1000a-315433mhz-rxtx-pair", 
            "text": "Feb 27, 2014\nInitial tests of FS1000a 315mhz RX/TX pair:\nThis  document seems  to be relevant to these transmit and receivers.  And the library can be found  here  The library contains the sketches found on the page, with the exception that they don\u2019t set the\nRX or TX pin\nvw_set_tx_pin(3);\nvw_set_rx_pin(3);\nAlso the receiver sketch seems to be a bit different - the example in the library prints out HEX\ncodes.\nfor the most part these are very simple to use - one Arduino is setup to send information, the\nother is setup to receive that information - and do something with it.\nModulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for\ndata So it has some of the same weaknesses and strengths of AM.  For more information  Finding a distance for them was a little harder, but as near as I can figure\n40 meters or 131 feet indoors, 100 meters or 328 feet in the open.\nI tested at about 60 feet inside and it worked without a problem.\nRange seems to be dependant on how much voltage you put on the transmitter - from what I\nfound the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust\n12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the\nsame board we have. Better to be safe then sorry and go with 5v.\nLike finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say\nbetween 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant\non distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The\nsites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as\nreading sensor data.\nImpressions of this it would make a good low power data sender for a remote sensor, only takes\nup one pin, and is really simple to use.\nOther information (But not sure if the RX/TX board are the same as what we have): Spark Fun  Seeed Studio  - Pretty Sure this the board I have Another Seeed Studio  Update: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some\nquirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that\nis. (Found this out by trying to send a tempature variable floating point to it)\nand the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards.\n(have been trying for the past 2 hours to get the library to work with my Squarewear, wearable\ntemperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the\nsquarewear is not an Arduino, it is closely related to one.\nPlans this weekend, try some alternative methods of getting these RF devices to work.", 
            "title": "FS1000a 315/433mhz RX/TX pair"
        }, 
        {
            "location": "/fs1000a/#kd8bxp-made-this", 
            "text": "", 
            "title": "KD8BXP Made This"
        }, 
        {
            "location": "/nrf24l01/", 
            "text": "NRF24L01\n\n\nNOTHING TO SEE YET, but check back soon!", 
            "title": "NRF24L01 Transceiver Module"
        }, 
        {
            "location": "/nrf24l01/#nrf24l01", 
            "text": "NOTHING TO SEE YET, but check back soon!", 
            "title": "NRF24L01"
        }, 
        {
            "location": "/sp0-512/", 
            "text": "SP0-512 Speech Synthsizer\n\n\nNOTHING TO SEE YET, but check back soon!", 
            "title": "SP0-512 Speech Synthesizer"
        }, 
        {
            "location": "/sp0-512/#sp0-512-speech-synthsizer", 
            "text": "NOTHING TO SEE YET, but check back soon!", 
            "title": "SP0-512 Speech Synthsizer"
        }
    ]
}