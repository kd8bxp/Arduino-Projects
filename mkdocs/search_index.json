{
    "docs": [
        {
            "location": "/", 
            "text": "Arduino Projects\n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \nhttp://www.gnu.org/licenses", 
            "title": "Home"
        }, 
        {
            "location": "/#arduino-projects", 
            "text": "", 
            "title": "Arduino Projects"
        }, 
        {
            "location": "/#support-me", 
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi", 
            "title": "Support Me"
        }, 
        {
            "location": "/#other-projects", 
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog", 
            "title": "Other Projects"
        }, 
        {
            "location": "/#credits", 
            "text": "Copyright (c) 2017 LeRoy Miller", 
            "title": "Credits"
        }, 
        {
            "location": "/#license", 
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see  http://www.gnu.org/licenses", 
            "title": "License"
        }, 
        {
            "location": "/tutorials/blink/blink/", 
            "text": "Arduino Blink\n\n\nWhy is important to blink a LED?\n\n\n\n\nIt shows how digital IO works.\n\n\n\n\nvoid setup() {\n\n    pinMode(13, OUTPUT);\n\n}\n\nvoid loop() {\n\n    digitalWrite(13, HIGH);\n    delay(1000);\n    digitalWrite(13, LOW);\n    delay(1000);\n\n}\n\n\n\n\nIn the above example, we set the LED pin to be a OUTPUT - This tells the microcontroller that whatever is connected to the pin is expecting something\nfrom the controller.  A INPUT would tell the microcontroll to expect to see something (data) on that pin.\n\nInside the loop we tell PIN 13 to go HIGH, delay for 1000 microseconds (about 1 second.) and go LOW, delay again, and repeat. In this case a HIGH will turn the LED on and a LOW will turn it off.  The delay will STOP the microcontroller from doing anything else.\n\nThe the controller is delayed it can not do anything else (mostly), no other sensors can be used, or outputs have information written to them.\n\n\nIs there a better way?\n\n\nBlink without delay", 
            "title": "Blink"
        }, 
        {
            "location": "/tutorials/blink/blink/#arduino-blink", 
            "text": "Why is important to blink a LED?   It shows how digital IO works.   void setup() {\n\n    pinMode(13, OUTPUT);\n\n}\n\nvoid loop() {\n\n    digitalWrite(13, HIGH);\n    delay(1000);\n    digitalWrite(13, LOW);\n    delay(1000);\n\n}  In the above example, we set the LED pin to be a OUTPUT - This tells the microcontroller that whatever is connected to the pin is expecting something\nfrom the controller.  A INPUT would tell the microcontroll to expect to see something (data) on that pin. \nInside the loop we tell PIN 13 to go HIGH, delay for 1000 microseconds (about 1 second.) and go LOW, delay again, and repeat. In this case a HIGH will turn the LED on and a LOW will turn it off.  The delay will STOP the microcontroller from doing anything else. \nThe the controller is delayed it can not do anything else (mostly), no other sensors can be used, or outputs have information written to them.  Is there a better way?", 
            "title": "Arduino Blink"
        }, 
        {
            "location": "/tutorials/blink/blink/#blink-without-delay", 
            "text": "", 
            "title": "Blink without delay"
        }, 
        {
            "location": "/tutorials/robots/robotstart/", 
            "text": "Understanding Digital I/O\n\n\nblah blah blah\n\n\nDoing something useful\n\n\nblah blah blah\n\n\nFigure out Motor direction and speed control\n\n\nblah blah blah", 
            "title": "Getting Started"
        }, 
        {
            "location": "/tutorials/robots/robotstart/#understanding-digital-io", 
            "text": "blah blah blah", 
            "title": "Understanding Digital I/O"
        }, 
        {
            "location": "/tutorials/robots/robotstart/#doing-something-useful", 
            "text": "blah blah blah", 
            "title": "Doing something useful"
        }, 
        {
            "location": "/tutorials/robots/robotstart/#figure-out-motor-direction-and-speed-control", 
            "text": "blah blah blah", 
            "title": "Figure out Motor direction and speed control"
        }, 
        {
            "location": "/projects/arduino/chatterbot/", 
            "text": "Chatter Bot\n\n\nInstallation\n\n\nSimple fun chatter bot. \n\n1) Head from a Wowwee Tri-bot\n\n2) Catalex Uart MP3 player \n\n3) Arduino UNO or the like\n\n4) amplified speaker for the MP3 player  \n\n\nFrom the Tri-Bot Head, purple wire is connected to 3.3v\nusing a ground wire I tested the other wires to figure out which does what.\nI am only using the center mouth led, and the 2 eye leds in this project.\nThere are also 2 ear leds, a white led (headlamp), and 2 more mouth leds.\nThere is a motor that will pop the headlamp and ears out.\nThis motor will also bring them all back into the head. \n\n\nYou need to find some jokes or some random stuff for your chat bot to just\nmindless say.  For mine I found some Star Wars jokes. Used a Text to Speech program, I made\na WAV file, and converted that file to a MP3. \nThe MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not\nany way synchronized to the sound, it just flashes the mouth.\n\n\nThings To Do\n\n\nadd other mouth LEDs.\nmake it play more than one MP3 file or repeat the MP3 over and over again.\n\n\nUsage\n\n\nTODO: Write usage instructions\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nLeRoy Miller (2015) and Catalex (unknown date)\nmost of the software is for the mp3 and based off the Catalex sketches.\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \nhttp://www.gnu.org/licenses", 
            "title": "Chatter Bot"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#chatter-bot", 
            "text": "", 
            "title": "Chatter Bot"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#installation", 
            "text": "Simple fun chatter bot.  \n1) Head from a Wowwee Tri-bot \n2) Catalex Uart MP3 player  \n3) Arduino UNO or the like \n4) amplified speaker for the MP3 player    From the Tri-Bot Head, purple wire is connected to 3.3v\nusing a ground wire I tested the other wires to figure out which does what.\nI am only using the center mouth led, and the 2 eye leds in this project.\nThere are also 2 ear leds, a white led (headlamp), and 2 more mouth leds.\nThere is a motor that will pop the headlamp and ears out.\nThis motor will also bring them all back into the head.   You need to find some jokes or some random stuff for your chat bot to just\nmindless say.  For mine I found some Star Wars jokes. Used a Text to Speech program, I made\na WAV file, and converted that file to a MP3. \nThe MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not\nany way synchronized to the sound, it just flashes the mouth.", 
            "title": "Installation"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#things-to-do", 
            "text": "add other mouth LEDs.\nmake it play more than one MP3 file or repeat the MP3 over and over again.", 
            "title": "Things To Do"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#usage", 
            "text": "TODO: Write usage instructions", 
            "title": "Usage"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#contributing", 
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request", 
            "title": "Contributing"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#credits", 
            "text": "LeRoy Miller (2015) and Catalex (unknown date)\nmost of the software is for the mp3 and based off the Catalex sketches.", 
            "title": "Credits"
        }, 
        {
            "location": "/projects/arduino/chatterbot/#license", 
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see  http://www.gnu.org/licenses", 
            "title": "License"
        }, 
        {
            "location": "/projects/arduino/arduino-project-4x4-keypad-matrix-rotary-encoder/README/", 
            "text": "20140625 4x4 Keypad Matrix \n Rotary Encoder with switch\n\n\nMy final project for the week was to use a 4x4 keypad matrix, and a\nrotary encoder with switch.\n\n\n{width=\"6.5in\" height=\"3.6527777777777777in\"}\n\n\nThe 4x4 16 Key matrix is pretty easy to use, it does take 8 I/O lines,\nbut works well, and the code to make it work is pretty small. A lot of\ninformation about it can be found here:\n\n\nhttps://sites.google.com/site/arduinomega2560projects/home/level-2/4x4-matrix-16-key-membrane\n\n\nI did end up modifying the code slightly, They were using a Mega, but I\nthink the code would have needed to be modified slightly even if they\nhad hooked up a UNO. 1st they used Pin 13 twice (one time to turn on/off\nthe LED, and again they used it to read the keypad, this of course\ndidn\u2019t work). SO I ended up moving the line from pin 13 to pin 5. Next\nthing it\u2019s not as clear as it could be which pins on the keypad to hook\nto which pins on the arduino.\n\n\nI am going to use his picture and try to explain it a bit better:\n\n\n{width=\"3.526042213473316in\" height=\"2.78125in\"}\n\n\n1 2 3 4 5 6 7 8\n\n\nas you can see there are 8 pins on the keypad. Looking from the left to\nthe right lets # them 1 to 8, (I made the picture bigger, so it looks\ndistorted, and my numbers may or may not line up the way I want, but I\ntried).\n\n\nI am using an UNO, but from what I can tell this should work on any\nvariation of Arduino.\n\n\nKeypad Pins   Arduino Pins\n\n\n\n\n1             9\n  2             8\n  3             7\n  4             6\n  5             5 (This is my modification)\n  6             12\n  7             11\n  8             10\n\n\nThis setup seems to work with the (modified) sketch and library found on\nthe website.\n\n\nMy other modifications were an addition of pinMode(13, OUTPUT); to set\nthe Led, the * and # on the keypad will turn on and off the LED, this\nseemed to be a needed change with the way the sketch was written.\n\n\nThe sketch setups an array with the numbers and letters in the \u201ccorrect\u201d\nlocations, as you push a button it reads the ROWs and COLs and then\nusing the array it outputs the number or letter.\n\n\n\n\n/* Keypadtest.pde\n\n\n*\n\n\n* Demonstrate the simplest use of the keypad library.\n\n\n*\n\n\n* The first step is to connect your keypad to the\n\n\n* Arduino using the pin numbers listed below in\n\n\n* rowPins[] and colPins[]. If you want to use different\n\n\n* pins then you can change the numbers below to\n\n\n* match your setup.\n\n\n*\n\n\n*/\n\n\n#include \nKeypad.h\n\n\nconst byte ROWS = 4; // Four rows\n\n\nconst byte COLS = 4; // four columns\n\n\n// Define the Keymap\n\n\nchar keys[ROWS][COLS] = {\n\n\n{'1','2','3','A'},\n\n\n{'4','5','6','B'},\n\n\n{'7','8','9','C'},\n\n\n{'*','0','#','D'}\n\n\n};\n\n\n// Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.\n\n\nbyte rowPins[ROWS] = { 9, 8, 7, 6 };\n\n\n// Connect keypad COL0, COL1 and COL2 to these Arduino pins.\n\n\nbyte colPins[COLS] = { 5, 12, 11, 10 };\n\n\n// Create the Keypad\n\n\nKeypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );\n\n\n#define ledpin 13\n\n\nvoid setup()\n\n\n{\n\n\n// digitalWrite(ledpin, HIGH);\n\n\npinMode(13, OUTPUT);\n\n\nSerial.begin(9600);\n\n\n}\n\n\nvoid loop()\n\n\n{\n\n\nchar key = kpd.getKey();\n\n\nif(key) // Check for a valid key.\n\n\n{\n\n\nswitch (key)\n\n\n{\n\n\ncase '*':\n\n\ndigitalWrite(13, LOW);\n\n\nbreak;\n\n\ncase '#':\n\n\ndigitalWrite(13, HIGH);\n\n\nbreak;\n\n\ndefault:\n\n\nSerial.println(key);\n\n\n}\n\n\n}\n\n\n}\n\n\n\n\n\n\nAbove is my modified code.\n\n\nThe Rotary switch is something a little different, from this website,\n\nhttp://bildr.org/2012/08/rotary-encoder-arduino/\n\n\nit\u2019s output this a 2 digit binary code, that will go 00, 01, 10, 11, so\nif you are rotating the switch and starting at 01 you can either have a\n00 or 11 depending on direction of the switch. so by adding the previous\nencoded value to the beginning of the current encoded value we get 1 of\n8 possible numbers (0001, 0010, 0100, 0111, 1000, 1011, 1110, 1101)\n1101, 0100, 0010, 1011 all mean clockwise movement, 1110, 0111, 0001,\n1000 are all counter-clockwise. Easy enough, now we just need to read\nthe switches, The sketch uses interrupts to handle this, and it seems to\na good way to handle it.\n\n\nWhile the website, explained how these worked pretty well, it didn\u2019t\nhave hook up instructions for the encoder Jim got, it took a little\ntrail and error, but since are only 5 pins, it wasn\u2019t that hard to\nfigure out.\n\n\n{width=\"2.4722222222222223in\"\nheight=\"1.9861111111111112in\"}\n\n\nAs you can see in this picture it\u2019s pins are labeled,\n\n\n2 of the labels ended up making since:\n\n\nGND - Ground \n SW - is the Switch (Pin 4 on the Arduino)\n\n\nRotary Switch Pin   Arduino\n\n\n\n\nGnd                 ground\n  +                   2\n  SW                  4\n  DT                \n\n  CLK                 3\n\n\nThe rotary encoder Jim got has a switch, so I used the code for that\nsection.\n\n\nOne line of code did need to be changed, In void loop() the\nif(digitalRead(encoderSwitchPin2).... should just be\n(encoderSwitchPin)... That was the only error I found in the code.\n\n\n\n\n//From bildr article: http://bildr.org/2012/08/rotary-encoder-arduino/\n\n\n//these pins can not be changed 2/3 are special pins\n\n\nint encoderPin1 = 2;\n\n\nint encoderPin2 = 3;\n\n\nint encoderSwitchPin = 4; //push button switch\n\n\nvolatile int lastEncoded = 0;\n\n\nvolatile long encoderValue = 0;\n\n\nlong lastencoderValue = 0;\n\n\nint lastMSB = 0;\n\n\nint lastLSB = 0;\n\n\nvoid setup() {\n\n\nSerial.begin (9600);\n\n\npinMode(encoderPin1, INPUT);\n\n\npinMode(encoderPin2, INPUT);\n\n\npinMode(encoderSwitchPin, INPUT);\n\n\ndigitalWrite(encoderPin1, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderPin2, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderSwitchPin, HIGH); //turn pullup resistor on\n\n\n//call updateEncoder() when any high/low changed seen\n\n\n//on interrupt 0 (pin 2), or interrupt 1 (pin 3)\n\n\nattachInterrupt(0, updateEncoder, CHANGE);\n\n\nattachInterrupt(1, updateEncoder, CHANGE);\n\n\n}\n\n\nvoid loop(){\n\n\n//Do stuff here\n\n\nif(digitalRead(encoderSwitchPin)){\n\n\n//button is not being pushed\n\n\n}else{\n\n\n//button is being pushed\n\n\n}\n\n\nSerial.println(encoderValue);\n\n\ndelay(1000); //just here to slow down the output, and show it will work even during a delay\n\n\n}\n\n\nvoid updateEncoder(){\n\n\nint MSB = digitalRead(encoderPin1); //MSB = most significant bit\n\n\nint LSB = digitalRead(encoderPin2); //LSB = least significant bit\n\n\nint encoded = (MSB \n 1) |LSB; //converting the 2 pin value to single number\n\n\nint sum = (lastEncoded \n 2) | encoded; //adding it to the previous encoded value\n\n\nif(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++;\n\n\nif(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --;\n\n\nlastEncoded = encoded; //store this value for next time\n\n\n}\n\n\n\n\n\n\nThe above code has been modified.\n\n\nMy next step was to make both the Keypad \n the Rotary Encoder work\ntogether, I combined the code from both, made a couple of small changes\nto how the rotary encoder worked, you now can change the rotary\nswitches, but the changes are not displayed until you push the switch\nbutton. The keypad will work with out the button being pushed, and the\nLED on pin 13 will turn on and off with the use of * and # keys.\n\n\nThis is what I came up with:\n\n\n\n\n/* Keypadtest.pde\n\n\n*\n\n\n* Demonstrate the simplest use of the keypad library.\n\n\n*\n\n\n* The first step is to connect your keypad to the\n\n\n* Arduino using the pin numbers listed below in\n\n\n* rowPins[] and colPins[]. If you want to use different\n\n\n* pins then you can change the numbers below to\n\n\n* match your setup.\n\n\n*\n\n\n*/\n\n\n#include \nKeypad.h\n\n\nint encoderPin1 = 2;\n\n\nint encoderPin2 = 3;\n\n\nint encoderSwitchPin = 4; //push button switch\n\n\nvolatile int lastEncoded = 0;\n\n\nvolatile long encoderValue = 0;\n\n\nlong lastencoderValue = 0;\n\n\nint lastMSB = 0;\n\n\nint lastLSB = 0;\n\n\nconst byte ROWS = 4; // Four rows\n\n\nconst byte COLS = 4; // four columns\n\n\n// Define the Keymap\n\n\nchar keys[ROWS][COLS] = {\n\n\n{'1','2','3','A'},\n\n\n{'4','5','6','B'},\n\n\n{'7','8','9','C'},\n\n\n{'*','0','#','D'}\n\n\n};\n\n\n// Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.\n\n\nbyte rowPins[ROWS] = { 9, 8, 7, 6 };\n\n\n// Connect keypad COL0, COL1 and COL2 to these Arduino pins.\n\n\nbyte colPins[COLS] = { 5, 12, 11, 10 };\n\n\n// Create the Keypad\n\n\nKeypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );\n\n\n#define ledpin 13\n\n\nvoid setup()\n\n\n{\n\n\n// digitalWrite(ledpin, HIGH);\n\n\npinMode(13, OUTPUT);\n\n\nSerial.begin(9600);\n\n\npinMode(encoderPin1, INPUT);\n\n\npinMode(encoderPin2, INPUT);\n\n\npinMode(encoderSwitchPin, INPUT);\n\n\ndigitalWrite(encoderPin1, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderPin2, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderSwitchPin, HIGH); //turn pullup resistor on\n\n\n//call updateEncoder() when any high/low changed seen\n\n\n//on interrupt 0 (pin 2), or interrupt 1 (pin 3)\n\n\nattachInterrupt(0, updateEncoder, CHANGE);\n\n\nattachInterrupt(1, updateEncoder, CHANGE);\n\n\n}\n\n\nvoid loop()\n\n\n{\n\n\nif(digitalRead(encoderSwitchPin)){\n\n\n//button is not being pushed\n\n\n}else{\n\n\nSerial.println(\"Rotary Encoder Button Pushed\");\n\n\n//button is being pushed\n\n\nSerial.print(\"Rotary Encoder: \");\n\n\nSerial.println(encoderValue);\n\n\ndelay(100); //just here to slow down the output, and show it will work even during a delay\n\n\n}\n\n\nchar key = kpd.getKey();\n\n\nif(key) // Check for a valid key.\n\n\n{\n\n\nswitch (key)\n\n\n{\n\n\ncase '*':\n\n\ndigitalWrite(13, LOW);\n\n\nbreak;\n\n\ncase '#':\n\n\ndigitalWrite(13, HIGH);\n\n\nbreak;\n\n\ndefault:\n\n\nSerial.println(key);\n\n\n}\n\n\n}\n\n\n}\n\n\nvoid updateEncoder(){\n\n\nint MSB = digitalRead(encoderPin1); //MSB = most significant bit\n\n\nint LSB = digitalRead(encoderPin2); //LSB = least significant bit\n\n\nint encoded = (MSB \n 1) |LSB; //converting the 2 pin value to single number\n\n\nint sum = (lastEncoded \n 2) | encoded; //adding it to the previous encoded value\n\n\nif(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++;\n\n\nif(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --;\n\n\nlastEncoded = encoded; //store this value for next time\n\n\n}\n\n\n\n\n\n\nSo there you have it, a whole week of Binary and BCD!", 
            "title": "4x4 Keypad Matrix"
        }, 
        {
            "location": "/projects/arduino/arduino-project-arduino-vga-out/README/", 
            "text": "May 6, 2014\n\n\nArduino VGA Out, one of the many things I randomly see as I roam the\ninternet. This is kind of a neat project, and it does work, and it was\npretty simple to hookup even thou there was an error in the\ndocumentation. I do have to say that couple of the sketches on the\ngoogle code site didn\u2019t work. I\u2019m not sure if they are works in progress\nor what. That being said, the project did as expected and outputed a\ndisplay on a VGA monitor. Here is the link to the project,\n\n\nhttps://code.google.com/p/arduino-vgaout/\n\nIt seems there hasn\u2019t been\nan activity on the site since June of 2013, so I don\u2019t know what the\ncurrent status is. I also had to do a little digging to find what pins\non the arduino this uses. And pictures of someones completed setup can\nbe found here (It looks like he was using a 2011 version):\n\n\nhttps://plus.google.com/photos/117534855759200010314/albums/5687433885778031105?banner=pwa\n\n\nIn the schematic, he also points out that PIN 9 shouldn\u2019t be hooked up\non the VGA connector, PIN 5 and PIN 10 should be ground, there was an\nerror in the original schematics that are still on the google code site.\n\n\nQuite a bit more information can be found on the Arduino forums:\n\n\nhttp://forum.arduino.cc/index.php?PHPSESSID=dfdb14903eb27c46f88347c097effb39\ntopic=76020.msg1123866#msg1123866\n\n\nI was going to chop up an old VGA cable to make this when I found that\nMCM electronics have this (and it\u2019s only \\$4.50) and since I wanted to\nbe sure I got the right resistors for this project I was already going\nto make an order, seemed like a no brainer:\n\n\nhttp://www.mcmelectronics.com/product/83-12821\n\n\n{width=\"4.6875in\" height=\"1.4375in\"}\n\n\nIt probably ending up saving some build time, thou how much would be\ndebatable. So here are a couple of pictures of my setup:\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\"\nheight=\"4.875in\"}\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\nSo as you can see, it\u2019s takes up a lot of pins, all of the analog pins,\nand 2 of the digital pins. The digital pins are used for HSYNC and\nVSYNC, the analog pins are used for RGB, each color channel takes two\npins, and each have a 1K and 470ohm resistor wired up. And yeah, I went\na little nuts with the size of the resistors, I wasn\u2019t really thinking\nabout it at the time I ordered them, oh well, they were cheap something\nlike \\$0.70 for 10 of them.\n\n\nI probably need to trim up the resistors a little, but what the heck it\nworks, and it will be one of those projects that I can say I did it, and\nnow it\u2019s in a box\u2026 :-)", 
            "title": "Arduino VGA"
        }, 
        {
            "location": "/projects/arduino/arduino-project-bmp180-digital-barometric-pressur/README/", 
            "text": "Arduino Project: BMP180 Digital Barometric Pressure Sensor {#arduino-project-bmp180-digital-barometric-pressure-sensor}\n\n\nMay 8, 2014\n\n\nBMP180 Digital Barometric Pressure Sensor\n\n\nOnce again the folks over at Sparkfun out do the folks at Ada Fruit - Starting to worry about the people at Ada Fruit they are slipping alittle. LOL\n\n\nThere is more information about this sensor then I could possibly give you, they even go into what pascal are (Pa, Basicly it\u2019s a measure of force per unit area, defined as one newton per square metre - You get all that...yeah, see Sparkfun explains it beter)\n\n\nhttps://learn.sparkfun.com/tutorials/bmp180-barometric-pressure-sensor-hookup-/under-pressure\n\n\nThe device that Sparkfun has is different, from what the club has, but it\u2019s almost the same, it\u2019s close enough that their tutorial works really well. The sensor on it is the same sensor that on the clubs BMP180.\n\n\nThe device is an I2C device, it is very easy to hook up. SDA, SCL (Data and Clock), 3.3v and ground, that is it. On the UNO it\u2019s SDA to A4, SCL to A5\n\n\nThe other VCC connector on the board is for voltages lower then 3.3v\n\n\n\n\nAda Fruit does have plenty of information about this sensor as well, and their sensor looks more like what the club has.\n\n\nhttp://www.adafruit.com/products/1603\n and \nhttps://learn.adafruit.com/bmp085\n\n\nThe problem I had with Adafruits was the sketch didn\u2019t seem to give as much or as good information as what Sparkfun did.\n\n\n\n\nAdafruits also requires one extra library which wasn\u2019t included in the download package provided, that caused an issue for about 2 mins until I realized it called a different library. Not sure why they did that, but after I got the 2nd library it did work, just didn\u2019t seem as good as Sparkfun.\n\n\nThe outputs from the sensor, are Pressure, Temperature, and Altitude (Altitude can be both above sea-level and as a relative from it\u2019s starting point), this is a very cool sensor, and with the addition of the humitdy sensor and maybe a wind speed sensor, this could be a complete low cost weather station.", 
            "title": "BMP180 Sensor"
        }, 
        {
            "location": "/projects/arduino/arduino-project-bmp180-digital-barometric-pressur/README/#arduino-project-bmp180-digital-barometric-pressure-sensor-arduino-project-bmp180-digital-barometric-pressure-sensor", 
            "text": "May 8, 2014  BMP180 Digital Barometric Pressure Sensor  Once again the folks over at Sparkfun out do the folks at Ada Fruit - Starting to worry about the people at Ada Fruit they are slipping alittle. LOL  There is more information about this sensor then I could possibly give you, they even go into what pascal are (Pa, Basicly it\u2019s a measure of force per unit area, defined as one newton per square metre - You get all that...yeah, see Sparkfun explains it beter)  https://learn.sparkfun.com/tutorials/bmp180-barometric-pressure-sensor-hookup-/under-pressure  The device that Sparkfun has is different, from what the club has, but it\u2019s almost the same, it\u2019s close enough that their tutorial works really well. The sensor on it is the same sensor that on the clubs BMP180.  The device is an I2C device, it is very easy to hook up. SDA, SCL (Data and Clock), 3.3v and ground, that is it. On the UNO it\u2019s SDA to A4, SCL to A5  The other VCC connector on the board is for voltages lower then 3.3v   Ada Fruit does have plenty of information about this sensor as well, and their sensor looks more like what the club has.  http://www.adafruit.com/products/1603  and  https://learn.adafruit.com/bmp085  The problem I had with Adafruits was the sketch didn\u2019t seem to give as much or as good information as what Sparkfun did.   Adafruits also requires one extra library which wasn\u2019t included in the download package provided, that caused an issue for about 2 mins until I realized it called a different library. Not sure why they did that, but after I got the 2nd library it did work, just didn\u2019t seem as good as Sparkfun.  The outputs from the sensor, are Pressure, Temperature, and Altitude (Altitude can be both above sea-level and as a relative from it\u2019s starting point), this is a very cool sensor, and with the addition of the humitdy sensor and maybe a wind speed sensor, this could be a complete low cost weather station.", 
            "title": "Arduino Project: BMP180 Digital Barometric Pressure Sensor {#arduino-project-bmp180-digital-barometric-pressure-sensor}"
        }, 
        {
            "location": "/projects/arduino/arduino-project-fs1000a-433mhz-transmitters/README/", 
            "text": "Arduino Project: FS1000a 433Mhz Transmitters {#arduino-project-fs1000a-433mhz-transmitters}\n\n\n02/27/2014 FS1000a 315mhz RX/TX pair\n\n\n1. Project Reference Number / Title:\n\n\n\n\n20140227 FS1000a 315mhz RX/TX pair\n\n\n\n\nI have a corner! :-)\n\n\nFeb 27, 2014\n\n\nInitial tests of FS1000a 315mhz RX/TX pair:\n\n\nThis document seems to be relevant to these transmit and receivers.\n\n\nhttp://ardumarket.com/en/transmisors/transmisor-rf-fs1000a-330-443mhz-arduino-pic-id19.html\n\n\nYou also need the library from here:\n\n\nhttp://www.open.com.au/mikem/arduino/VirtualWire/VirtualWire-1.14.zip\n\n\nThe library contains the sketches found on the page, with the exception that they don\u2019t set the RX or TX pin\n\n\nvw_set_tx_pin(3);\n\n\nvw_set_rx_pin(3);\n\n\nAlso the receiver sketch seems to be a bit different - the example in the library prints out HEX codes.\n\n\nfor the most part these are very simple to use - one Arduino is setup to send information, the other is setup to receive that information - and do something with it.\n\n\nModulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for data So it has some of the same weaknesses and strengths of AM. For more information see:\n\n\nhttp://en.wikipedia.org/wiki/Amplitude-shift_keying\n\n\nFinding a distance for them was a little harder, but as near as I can figure\n\n\n40 meters or 131 feet indoors, 100 meters or 328 feet in the open.\n\n\nI tested at about 60 feet inside and it worked without a problem.\n\n\nRange seems to be dependant on how much voltage you put on the transmitter - from what I found the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust 12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the same board we have. Better to be safe then sorry and go with 5v.\n\n\nLike finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say between 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant on distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The sites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as reading sensor data.\n\n\nImpressions of this it would make a good low power data sender for a remote sensor, only takes up one pin, and is really simple to use.\n\n\nOther information (But not sure if the RX/TX board are the same as what we have):\n\n\nhttps://www.sparkfun.com/datasheets/RF/KLP_Walkthrough.pdf\n\n\nhttp://www.seeedstudio.com/wiki/index.php?title=315Mhz_RF_link_kit\n (Pretty sure this is our board)\n\n\nhttp://www.seeedstudio.com/depot/315mhz-rf-link-kit-p-76.html\n\n\nUpdate: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some quirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that is. (Found this out by trying to send a tempature variable floating point to it)\n\n\nand the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards.\n\n\n(have been trying for the past 2 hours to get the library to work with my Squarewear, wearable temperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the squarewear is not an Arduino, it is closely related to one.\n\n\nPlans this weekend, try some alternative methods of getting these RF devices to work.", 
            "title": "FS1000a 433mhz Transmitters"
        }, 
        {
            "location": "/projects/arduino/arduino-project-fs1000a-433mhz-transmitters/README/#arduino-project-fs1000a-433mhz-transmitters-arduino-project-fs1000a-433mhz-transmitters", 
            "text": "02/27/2014 FS1000a 315mhz RX/TX pair  1. Project Reference Number / Title:   20140227 FS1000a 315mhz RX/TX pair   I have a corner! :-)  Feb 27, 2014  Initial tests of FS1000a 315mhz RX/TX pair:  This document seems to be relevant to these transmit and receivers.  http://ardumarket.com/en/transmisors/transmisor-rf-fs1000a-330-443mhz-arduino-pic-id19.html  You also need the library from here:  http://www.open.com.au/mikem/arduino/VirtualWire/VirtualWire-1.14.zip  The library contains the sketches found on the page, with the exception that they don\u2019t set the RX or TX pin  vw_set_tx_pin(3);  vw_set_rx_pin(3);  Also the receiver sketch seems to be a bit different - the example in the library prints out HEX codes.  for the most part these are very simple to use - one Arduino is setup to send information, the other is setup to receive that information - and do something with it.  Modulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for data So it has some of the same weaknesses and strengths of AM. For more information see:  http://en.wikipedia.org/wiki/Amplitude-shift_keying  Finding a distance for them was a little harder, but as near as I can figure  40 meters or 131 feet indoors, 100 meters or 328 feet in the open.  I tested at about 60 feet inside and it worked without a problem.  Range seems to be dependant on how much voltage you put on the transmitter - from what I found the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust 12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the same board we have. Better to be safe then sorry and go with 5v.  Like finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say between 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant on distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The sites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as reading sensor data.  Impressions of this it would make a good low power data sender for a remote sensor, only takes up one pin, and is really simple to use.  Other information (But not sure if the RX/TX board are the same as what we have):  https://www.sparkfun.com/datasheets/RF/KLP_Walkthrough.pdf  http://www.seeedstudio.com/wiki/index.php?title=315Mhz_RF_link_kit  (Pretty sure this is our board)  http://www.seeedstudio.com/depot/315mhz-rf-link-kit-p-76.html  Update: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some quirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that is. (Found this out by trying to send a tempature variable floating point to it)  and the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards.  (have been trying for the past 2 hours to get the library to work with my Squarewear, wearable temperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the squarewear is not an Arduino, it is closely related to one.  Plans this weekend, try some alternative methods of getting these RF devices to work.", 
            "title": "Arduino Project: FS1000a 433Mhz Transmitters {#arduino-project-fs1000a-433mhz-transmitters}"
        }, 
        {
            "location": "/projects/arduino/arduino-project-hc-05-bluetooth-device/README/", 
            "text": "4/1/2014 HC-05 Bluetooth device\n\n\n1. Project Reference Number / Title:\n\n\n\n\n\n\n20140401 \nHC-05 Bluetooth device\n\n\n\n\n\n\nApr 1, 2014 HC-05 Bluetooth device\n\n\nAt the 1st meeting I attended Jim gave me a blank holder for the HC-05\nBluetooth device, I was able to solder a HC-05 to it today, and it\nworked well.\n\n\nThe HC-05 bluetooth is a surface mount style device, and that can be a\nlittle scary for people.\n\n\nThey are cheap enough, and the blank is cheap enough I figured if I\nmessed it up I wasn\u2019t out much. You aren\u2019t saving yourself much by\nsoldering your own to the blank (I think .30 or .35 cents, spend the\nextra money and get one already mounted).\n\n\nI used the \u201cdrag\u201d method of soldier, which is only one method for doing\nsurface mounts, but I\u2019ve got to say, it was easy to do, and it works,\nand it works well.\n\n\nYou\u2019ll see in a couple of the pictures below that I didn\u2019t get every\npin, on this it doesn\u2019t matter, I got the pins that are connected and as\nI said the bluetooth does work well.\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}", 
            "title": "HC-05 Bluetooth"
        }, 
        {
            "location": "/projects/arduino/arduino-project-magnetic-reed-switch-water-sensor/README/", 
            "text": "{width=\"2.219141513560805in\"\nheight=\"1.6510422134733158in\"}\n\n\nSpecification\n\n\n1, The use of imported normally open dry Reed tube\n\n\n2, Comparator output signal clean wave well, driving ability, than 15mA.\n\n\n3, Rated voltage and 3.3V-5V\n\n\n4, Outputs: digital switching output (0 and 1)\n\n\n5, Abolt-hole, is easy to install\n\n\n6, Small Board PCB dimensions: 3.2cm x 1.4cm\n\n\n7, Using wide LM393 voltage comparator\n\n\nDescription:\n\n\n1. The Reed switch and magnet fit is required, at the time of induction\nto a certain degree of magnetic, on-State, the module output low level,\nwhen there is no magnetic force, a\n\n\ndisconnected state, output high, Reed switch and magnets sensing\ndistance of the 1.5cm beyond insensitive or will not trigger the\nphenomenon;\n\n\n2. DO the module output can be directly connected to the microcontroller\nI/O ports, Reed can be detected by single-chip microcomputer trigger\nstatus;\n\n\n3. Modules DO the output connected to the relay IN-formed power Reed\nswitch, direct control of high voltage.\n\n\nMay 8, 2014\n\n\nMagnetic Reed Switch \n Water Sensor\n - These two devices work the\nsame way, they are (for the most part) switches, what I found\ninteresting and was not expecting is that both are active low devices,\nWhat that means, is they both pass the 3.3v or 5v until the either a\nmagnetic is put to the reed switch, or the contacts on the water sensor\nare connected, then they go low.\n\n\nThere are probably a dozen of ways to use these, I ended up hooking them\nto an analog in and reading the voltages from there output lines, and\nthen I turned on the LED connected to pin 13.\n\n\nhttp://arduino.cc/en/Tutorial/ReadAnalogVoltage\n\n\nMy slightly modified sketch:\n\n\n/*\n\n\nReadAnalogVoltage\n\n\nReads an analog input on pin 0, converts it to voltage, and prints the\nresult to the serial monitor.\n\n\nAttach the center pin of a potentiometer to pin A0, and the outside pins\nto +5V and ground.\n\n\nThis example code is in the public domain.\n\n\n*/\n\n\n// the setup routine runs once when you press reset:\n\n\nvoid setup() {\n\n\n// initialize serial communication at 9600 bits per second:\n\n\nSerial.begin(9600);\n\n\npinMode(13, OUTPUT);\n\n\n}\n\n\n// the loop routine runs over and over again forever:\n\n\nvoid loop() {\n\n\n// read the input on analog pin 0:\n\n\nint sensorValue = analogRead(A0);\n\n\n// Convert the analog reading (which goes from 0 - 1023) to a voltage (0\n- 5V):\n\n\nfloat voltage = sensorValue * (5.0 / 1023.0);\n\n\n// print out the value you read:\n\n\nSerial.println(voltage);\n\n\nif (voltage \n 1) {digitalWrite(13, LOW);}\n\n\nif (voltage \n 1) {digitalWrite(13, HIGH);}\n\n\n}\n\n\nI never saw these ever make it clear to zero volts, but I don\u2019t know\nwhat kind of resolution the A2D converter has, and it doesn\u2019t really\nmatter. I made a choice that anything under 1 volt was going to turn\nsomething on, and any thing above 1 volt was going to turn that off.\n\n\nLike I said there are probably a dozen of different ways to use these,\nthat just seemed to be the quickest way.\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}", 
            "title": "Magnetic Reed Switch Water Sensor"
        }, 
        {
            "location": "/projects/arduino/arduino-project-mifare-rfid-reader-rc522/README/", 
            "text": "3/8/2014 Arduino Uno bootloader and the Mifare RFID reader/writer\nRC522\n\n\n1. Project Reference Number / Title:\n\n\n\n\n20140308 Arduino Uno bootloader and the Mifare RFID reader/writer\nRC522\n\n\n\n\nMar 8, 2014\n\n\nRFID - what is it? How does it work? what can you do with it? and how to\nuse RFID with an Arduino.\n\n\nRFID is a wireless non-contact use of electromagnetic fields to transfer\ndata. With the uses of Identifying and tracking inventory, or other\nobjects. There are several standards in use with RFID, too many to go\ninto here. There is also active RFID and Passive RFID, passive is\nprobably the most common. Active RFID has a greater range. RFID tags can\ncontain information and be both read from and written too (Depending on\nthe tag, and which version of tag you have.)\n\n\nThis is not a new technology, having origins dating back to 1945. A\n\u201cmodern\u201d passive radio transponder with memory was 1st patented in 1973,\nthis would be the great grand father of modern RFID.\n\n\nRFID works in several different frequencies, with probably the most\ncommon (at least consumer level) being 13.56 MHZ (HF) using the MIFARE\nISO/IEC 14443 standard, but other frequencies include 120 -150 kHZ (LF)\nwhich is currently unregulated, 433 Mhz (UHF) Short Range Devices also\nused for defence and active tags, 865 - 868 Mhz in Europe \n 902-928 Mhz\nin North America and using various standard\n\n\n2.4 to 5.8 Ghz - this is also various standards, and active RFID\n\n\n3.1 to 10 Ghz requires semi-active or active tags and appears to not be\nfully implemented at this time.\n\n\nA \u201cnew\u201d type of RFID is currently the defacto standard, and is being\nwildly used in cell phones and tablets - Near Field Communication (NFC)\n- NFC is ISO/IEC 14443.\n\n\nNFC tags generally speaking can hold more information then there early\nRFID counterparts.\n\n\nYou can also find NFC/RFID in a lot of credit cards, any place you see a\ncard reader that you just have to tag is using RFID. The Middletown\nLibrary and I would think the West Chester branch use RFID tags in their\nbooks, they have for years but I\u2019m not sure why they do it.\n\n\nHow does RFID work?\n\n\nIt\u2019s really pretty simple (as easy as 123) - Remember in school you\nprobably learned about Magnetic lines of force (magnetic poles North and\nSouth), probably you also remember that when a current is passed through\na coil you can create a electro-magnet. And when you put that near\nanother coil of wire you INDUCE a voltage on the 2nd coil? Well that is\nhow this works, the RFID reader has a coil, that is powered on making a\nlittle electromagnet probably not strong enough to pickup any thing, but\nstill it\u2019s there. The tags are also coils, and by passing the tag in\nfront of the reader you INDUCE a voltage. The tags also have a chip in\nthem that contains a tiny transceiver, and an ID code (each tag has a\nunique code, thou you can clone tags if needed, not going into how to do\nthat beyond the scope). Depending on the tag it may contain other\ninformation as well. The reader also has a transceiver in it and\nreceives information when the tag transmits. In passive system the tag\nneeds to be pretty close to the reader, In an active system the tag can\nbe a few feet to a few hundred feet away from the reader.\n\n\nWhich brings us to what can you do with RFID?\n\n\nAlot really, one of the big things is tracking, and managing inventory,\nEverything in the store has an RFID tag, you pickup an item and walk out\nthe store, the active scanners at the door - buzz - the system knows you\ndidn\u2019t pay for that item because it didn\u2019t get scanned at the checkout.\n(OK, that\u2019s just one example) I think this is probably why the libraries\nhave RFID tags in the books, but I don\u2019t know why they don\u2019t use them\nfor check ins/check outs (They also have bar codes on the books for\ncheck in/check out) Any way, off on a little tangent there.\n\n\nAlready said above, visa/master card/amex all have started to put RFID\nchips in credit cards for Fast Pay (NFC) BTW you can use your NFC\nenabled cell phones for fast pay if you have your account attached to\nyour phone.\n\n\nThe auto industry has been using RFID tags for years, in both the\nmanufacture and parts replacement in cars. - A new car is sitting on the\nline waiting to have a door, using an active tag the robots can find out\nwhat is missing, what color and just about anything else about the car\nit\u2019s making - updating the tag, and moving down to the next robot in the\nline. Parts bins are marked with RFID tags so the robots can find them\nwhen they are needed.\n\n\nOther uses, Tagging animals with owner information, toll collection\n(active readers mostly).\n\n\nand countless other uses.\n\n\nUsing RFID with an Arduino:\n\n\nThere are many different RFID readers available for the Arduino, they\nall seem to work the more or less the same. (Some are capable of writing\nto a tag others are not)\n\n\nMine is a cheap sub-\\$5 reader that came with two tags, a Mifare 522\nwhich is one of the most common out there. it uses a SPI interface.\n\n\nUnfortunately, there is not a whole lot of information out about the\nmodel I have, in fact I only found 2 website, both were virtually the\nsame.\n\n\nhttps://sites.google.com/site/arduinomega2560projects/home/level-1/arduino-rfid-rc522\n\n\nand\n\n\nhttp://www.grantgibson.co.uk/2012/04/how-to-get-started-with-the-mifare-mf522-an-and-arduino/\n\n\nThere wasn\u2019t a library to use, and I am still trying to make heads and\ntails out of the code they provided, but I think you send command to the\nreader in hex and wait for a reply.\n\n\nFrom what I can tell thou, you pass a tag in front of the reader, and\nthe arduino will send (serial console) the 5 ID strings contained in the\ntag.\n\n\nIf the right tag is used - It will say \u201cHello Dave\u201d or \u201cHello Grant\u201d.\nOne of the sites is also putting a \u201c2\u201d in front of the 1st set of IDs\n(not sure why but I removed that front the code as it just seemed\nstrange to be there)\n\n\nBoth websites also made a mistake about the pin map\n\n\nThey have a pin called SS mapped to Arduino pin 10, my board doesn\u2019t\nhave a pin marked SS but the pin marked SAD seems to work.\n\n\nJeremy is using a RFID reader that is based off a zigbee or works in a\nzigbee socket, also his has a \u201creal\u201d coil of wire, and his code is very\ndifferent as well. So each reader must be different.\n\n\nHere is the link to his setup:\n\n\nhttp://www.jeremyblum.com/2011/07/08/tutorial-12-for-arduino-rfid-card-reading/\n\n\nI think by Thursday I will have a demo working that will turn on and off\nLEDs using various tags I have.\n\n\nFinal thoughts: Most RFID systems need to keep up with the tag ID\nnumbers which would be contained within a database, however it is\npossible to have simple system with just a few tags (or one that doesn\u2019t\nneed updated often) that doesn\u2019t require a database. And this is the\ntype an Arduino is great for, simple RFID control of lighting or opening\na door.\n\n\nSome pictures of my setup:\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}", 
            "title": "Mifare RFID reader RC522"
        }, 
        {
            "location": "/projects/arduino/arduino-project-nokia-5110-lcd/README/", 
            "text": "Apr 20, 2014\n\n\nNokia 5110 LCD with Arduino.\n\n\nNot going to go too much into how this works, mainly because I\u2019m not\n100% sure myself.\n\n\nAlso not going to post a lot of code, because this device is very well\ndocumented. I will give links to Sparkfun and Adafruit, both with\ncontain a lot of information about the LCD.\n\n\nSparkfun, only uses the SPI Library, which is interesting, you will see\nin the code alot of HEX, which is how the display gets its commands.\nFrom what I can tell, the screen is not true SPI - but it close enough\nthat the SPI library doesn\u2019t have a problem with it. I think Sparkfun\ncontains more information, or at least better information about this\ndevice.\n\n\nThat being said, Adafruit developed a ready to use library - and from\nwhat I can tell they are making the display work a little different then\nhow Sparkfun did it. The library does make it a little nicer as well,\nsince you can just call what you need, there is still some HEX to do\ngraphics, but it looks like that is if you are doing a custom graphic,\nstandard things like lines and circles, squares are all handled by the\nlibrary. There demo program is better as well, shows off more of what\nthe display can do. So to sum up -\n\n\nSparkfun has better information, but Adafruit has a better library and\nprogram.\n\n\nHere\u2019s some links:\n\n\nhttps://www.sparkfun.com/products/10168\n\n\nhttps://learn.sparkfun.com/tutorials/graphic-lcd-hookup-guide/introduction\n\n\nhttps://github.com/adafruit/Adafruit-PCD8544-Nokia-5110-LCD-library\n\n\nStolen (don\u2019t say that too loud, but I think we are aloud to use them)\nfrom the Sparkfun site:\n\n\n{width=\"6.5in\" height=\"3.6944444444444446in\"}\n\n\n{width=\"6.5in\" height=\"2.125in\"}\n\n\njust for Frank\n\n\nhttp://www.partition-resize.com/resize-raid-partition/", 
            "title": "Nokia 5110 LCD"
        }, 
        {
            "location": "/projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/README/", 
            "text": "This weeks demo is for Pin Control over ethernet and as a bonus a small\n\nOLED Demo\n\n\nThese sketchs use a \u201creal\u201d Arduino ethernet shield. And by that I mean\n\none using a:\n\n\nW5100 Ethernet Controller\n\n\nhttp://arduino.cc/en/Main/ArduinoEthernetShield\n\n\n\n\nhttp://www.ebay.com/itm/UNO-ATMega328-1280-MEGA2560-Ethernet-Shield-W5100-Arduino-Main-Board-M3Y2-/171438857683?pt=LH_DefaultDomain_0\nhash=item27ea8d5dd3\n\n\nLike everything else the price of these is dropping, but if you do buy a\n\ncheap one off eBay make sure it has the W5100 there are others out that\n\ndont and they dont work the same way.\n\n\nI think I paid $10 or $11 for mine a year ago, now you can find them\n\nfor $8 bucks or less.\n\n\nPin control over ethernet is based on this project:\n\n\nhttp://bildr.org/2011/06/arduino-ethernet-pin-control/\n\n\nalternative website:\n\n\nhttps://web.archive.org/web/20140702134232/http://bildr.org/2011/06/arduino-ethernet-pin-control/\n\n\nThe above project sets up a webserver running on the Arduino. The\n\naddress of the server is displayed on a serial terminal. (192.168.1.xxx)\n\nIt is setup get a DHCP from your router.\n\n\nUsing the IP address you can set pins 2 to 9 to flash a LED.\n\n\nhttp://192.168.1.45/?2\n will flash the LED on PIN 2.\n\n\nhttp://192.168.1.45/?23\n will flash the LEDs on PIN2 and PIN 3 in order.\n\n\nSo some interesting patterns can be made from this:\n\n\nhttp://192.168.1.45/?2345678998765432\n will create something like\n\nK.I.T.T.s scanner.\n\n\n//ARDUINO 1.0+ ONLY\n//ARDUINO 1.0+ ONLY\n\n#include \nEthernet.h\n\n#include \nSPI.h\n\nboolean reading = false;\n\n////////////////////////////////////////////////////////////////////////\n//CONFIGURE\n////////////////////////////////////////////////////////////////////////\n//byte ip[] = { 192, 168, 0, 199 }; //Manual setup only\n//byte gateway[] = { 192, 168, 0, 1 }; //Manual setup only\n//byte subnet[] = { 255, 255, 255, 0 }; //Manual setup only\n// if need to change the MAC address (Very Rare)\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\nEthernetServer server = EthernetServer(80); //port 80\n////////////////////////////////////////////////////////////////////////\n\nvoid setup(){\nSerial.begin(9600);\n//Pins 10,11,12 \n 13 are used by the ethernet shield\npinMode(2, OUTPUT);\npinMode(3, OUTPUT);\npinMode(4, OUTPUT);\npinMode(5, OUTPUT);\npinMode(6, OUTPUT);\npinMode(7, OUTPUT);\npinMode(8, OUTPUT);\npinMode(9, OUTPUT);\nEthernet.begin(mac); //Ethernet.begin(mac, ip, gateway, subnet); //for manual setup\nserver.begin();\nSerial.println(Ethernet.localIP());\n}\n\nvoid loop(){\n\n// listen for incoming clients, and process qequest.\ncheckForClient();\n}\n\nvoid checkForClient(){\nEthernetClient client = server.available();\nif (client) {\n// an http request ends with a blank line\nboolean currentLineIsBlank = true;\nboolean sentHeader = false;\nwhile (client.connected()) {\nif (client.available()) {\nif(!sentHeader){\n// send a standard http response header\n\n\n\n\nclient.println(\"HTTP/1.1 200 OK\");\n\n\nclient.println(\"Content-Type: text/html\");\n\n\nclient.println();\n\n\nsentHeader = true;\n\n\n}\n\n\nchar c = client.read();\n\n\nif(reading \n c == ' ') reading = false;\n\n\nif(c == '?') reading = true; //found the ?, begin reading the info\n\n\nif(reading){\n\n\nSerial.print(c);\n\n\nswitch (c) {\n\n\ncase '2':\n\n\n//add code here to trigger on 2\n\n\ntriggerPin(2, client);\n\n\nbreak;\n\n\ncase '3':\n\n\n//add code here to trigger on 3\n\n\ntriggerPin(3, client);\n\n\nbreak;\n\n\ncase '4':\n\n\n//add code here to trigger on 4\n\n\ntriggerPin(4, client);\n\n\nbreak;\n\n\ncase '5':\n\n\n//add code here to trigger on 5\n\n\ntriggerPin(5, client);\n\n\nbreak;\n\n\ncase '6':\n\n\n//add code here to trigger on 6\n\n\ntriggerPin(6, client);\n\n\nbreak;\n\n\ncase '7':\n\n\n//add code here to trigger on 7\n\n\ntriggerPin(7, client);\n\n\nbreak;\n\n\ncase '8':\n\n\n//add code here to trigger on 8\n\n\ntriggerPin(8, client);\n\n\nbreak;\n\n\ncase '9':\n\n\n//add code here to trigger on 9\n\n\ntriggerPin(9, client);\n\n\nbreak;\n\n\n}\n\n\n}\n\n\nif (c == '\\n' \n currentLineIsBlank) break;\n\n\nif (c == '\\n') {\n\n\ncurrentLineIsBlank = true;\n\n\n}else if (c != '\\r') {\n\n\ncurrentLineIsBlank = false;\n\n\n}\n\n\n}\n\n\n}\n\n\ndelay(1); // give the web browser time to receive the data\n\n\nclient.stop(); // close the connection:\n\n\n}\n\n\n}\n\n\nvoid triggerPin(int pin, EthernetClient client){\n\n\n//blink a pin - Client needed just for HTML output purposes.\n\n\nclient.print(\"Turning on pin \");\n\n\nclient.println(pin);\n\n\nclient.print(\"\nbr\n\");\n\n\ndigitalWrite(pin, HIGH);\n\n\ndelay(25);\n\n\ndigitalWrite(pin, LOW);\n\n\ndelay(25);\n\n\n}\n\n\nThis is interesting, but really not useful. So I modified the sketch to\n\ntoggle the pins on or off (from one state to another) - my code can be\n\nfound here:\n\n\nhttps://codebender.cc/sketch:60959\n\n\nThis was done using a array of zeros or ones - the array represents the\n\nLED states, the position inside the array is the PIN number,\n\n\nin otherwords:\n\n\nboolean ledPins[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n\n\\^\n\n\nThis is PIN 0\n\n\nthe next zero is PIN 1, the next PIN 2, next PIN 3 etc.\n\n\nSo the question is why do we have 10 pins listed when there are only 8\n\nLEDs -\n\n\nthe simple answer is I needed a place holder of two digits - (with this\n\nexample, pins 0 and 1 are left open so as to easily reprogram the\n\nArduino) So the LEDs are hooked to PINs 2 to 9.\n\n\nPin 10, 11, 12, 13 are used by the ethernet shield.\n\n\nThe main part of the sketch I modified is below:\n\n\nvoid triggerPin(int pin, EthernetClient client){\n\n\n//blink a pin - Client needed just for HTML output purposes.\n\n\nclient.print(\"Toggling pin: \");\n\n\nclient.println(pin);\n\n\nclient.print(\"\nbr\n\");\n\n\ndigitalWrite(pin, !ledPins[pin]);\n\n\nledPins[pin]=!ledPins[pin];\n\n\n}\n\n\nThe sketch gives output to both the serial monitor, and the website.\n\n\nI liked how this worked, and thought this is a lot more useful if you\n\nneed to remotely turn something on or off.\n\n\nBut I asked myself what if you want to read and display a vaule on the\n\nwebsite:\n\n\nSo I modified the sketch one more time:\n\n\nhttps://codebender.cc/sketch:60961\n\n\nThis time I wanted to read a Analog joystick: and I added this code:\n\n\ncase '0':\n\n\nwhile(analogRead(0)\n522) {\n\n\nclient.print(\"Joystick 0: \");\n\n\nclient.print(analogRead(0));\n\n\nclient.print(\"\nbr\n\");\n\n\n}\n\n\nbreak;\n\n\ncase '1':\n\n\nwhile(analogRead(1)\n522) {\n\n\nclient.print(\"Joystick 1: \");\n\n\nclient.print(analogRead(1));\n\n\nclient.print(\"\nbr\n\");\n\n\n}\n\n\nbreak;\n\n\nTo activate this part of the code you need to send the webserver a zero\n\n(0) or a one (1)\n\n\nThis part of the code will stay active as long as the joystick vaule is\n\nabove 522 (522 is the center position) Which also mean that I am only\n\nreading two directions from Joystick - either down or left (but not up\n\nor right)\n\n\nIt\u2019s not the best way to make this work, and this was more of a test to\n\nmake it work, then it was to make it work correctly! :-)\n\n\nSo I looked at the example library that is included with the Arduino\n\nIDE:\n\n\nThat sketch can be found here:\n\n\nhttps://codebender.cc/sketch:61050\n\n\nWhich induces a couple of new things to the webserver - It also sets up\n\na static IP which for a IOT device (or a control over IP device) might\n\nmake more since to do.\n\n\nNext thing it does is show how to have the page served auto refresh this\n\ncan be a very useful thing to know.\n\n\nIt also will read all 6 analog ports and display the vaule on the web\n\npage.\n\n\nFor the demo I am only using analog Pin 0 and Pin 1 (So I modified the\n\nsketch to only read what I am using)\n\n\nAgain this was interesting, and displayed a good example but I wanted to\n\nuse a website to turn pins on or off - or display vaules\n\n\nand it lead me to this website:\n\n\nhttp://randomnerdtutorials.com/arduino-webserver-with-an-arduino-ethernet-shield/\n\n\nThis is a really good example of control and was close to what I wanted\n\nso\n\n\nOf course I modified the sketch for what I really wanted to\n\n\nhttps://codebender.cc/sketch:61051\n\n\n/*\n\n\nCreated by Rui Santos\n\n\nVisit: \nhttp://randomnerdtutorials.com\n for more arduino projects\n\n\nArduino with Ethernet Shield\n\n\n*/\n\n\n#include \nSPI.h\n\n\n#include \nEthernet.h\n\n\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; //physical mac\n\naddress\n\n\nbyte ip[] = { 192, 168, 1, 178 }; // ip in lan (that's what you need\n\nto use in your browser. (\"192.168.1.178\")\n\n\nbyte gateway[] = { 192, 168, 1, 1 }; // internet access via router\n\n\nbyte subnet[] = { 255, 255, 255, 0 }; //subnet mask\n\n\nEthernetServer server(80); //server port\n\n\nString readString;\n\n\nvoid setup() {\n\n\n// Open serial communications and wait for port to open:\n\n\nSerial.begin(9600);\n\n\nwhile (!Serial) {\n\n\n; // wait for serial port to connect. Needed for Leonardo only\n\n\n}\n\n\npinMode(2, OUTPUT);\n\n\npinMode(3, OUTPUT);\n\n\npinMode(4, OUTPUT);\n\n\npinMode(5, OUTPUT);\n\n\npinMode(6, OUTPUT);\n\n\npinMode(7, OUTPUT);\n\n\npinMode(8, OUTPUT);\n\n\npinMode(9, OUTPUT);\n\n\n// start the Ethernet connection and the server:\n\n\nEthernet.begin(mac, ip, gateway, subnet);\n\n\nserver.begin();\n\n\nSerial.print(\"server is at \");\n\n\nSerial.println(Ethernet.localIP());\n\n\n}\n\n\nvoid loop() {\n\n\n// Create a client connection\n\n\nEthernetClient client = server.available();\n\n\nif (client) {\n\n\nwhile (client.connected()) {\n\n\nif (client.available()) {\n\n\nchar c = client.read();\n\n\n//read char by char HTTP request\n\n\nif (readString.length() \n 100) {\n\n\n//store characters to string\n\n\nreadString += c;\n\n\n//Serial.print(c);\n\n\n}\n\n\n//if HTTP request has ended\n\n\nif (c == '\\n') {\n\n\nSerial.println(readString); //print to serial monitor for debuging\n\n\nclient.println(\"HTTP/1.1 200 OK\"); //send new page\n\n\nclient.println(\"Content-Type: text/html\");\n\n\nclient.println();\n\n\nclient.println(\"\nHTML\n\");\n\n\nclient.println(\"\nHEAD\n\");\n\n\n// client.println(\"\nmeta name='apple-mobile-web-app-capable'\n\ncontent='yes' /\n\");\n\n\n//client.println(\"\nmeta name='apple-mobile-web-app-status-bar-style'\n\ncontent='black-translucent' /\n\");\n\n\nclient.println(\"\nlink rel='stylesheet' type='text/css'\n\nhref='\nhttp://randomnerdtutorials.com/ethernetcss.css\n' /\n\");\n\n\nclient.println(\"\nTITLE\nProject Turn on Stuff From\n\nWebsite\n/TITLE\n\");\n\n\nclient.println(\"\n/HEAD\n\");\n\n\nclient.println(\"\nBODY\n\");\n\n\nclient.println(\"\nH1\nTurn on Stuff from a Website\n/H1\n\");\n\n\nclient.println(\"\nhr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nH2\nArduino with Ethernet Shield\n/H2\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?button1on\\\"\\\"\nTurn On LED\n\n1\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?button1off\\\"\\\"\nTurn Off LED\n\n1\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?button2on\\\"\\\"\nTurn On LED\n\n2\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?button2off\\\"\\\"\nTurn Off LED\n\n2\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?button3on\\\"\\\"\nTurn On LED\n\n3\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?button3off\\\"\\\"\nTurn Off LED\n\n3\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?button4on\\\"\\\"\nTurn On LED\n\n4\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?button4off\\\"\\\"\nTurn Off LED\n\n4\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?button5on\\\"\\\"\nTurn On LED 5\n\n\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?button5off\\\"\\\"\nTurn Off LED\n\n5\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?button6on\\\"\\\"\nTurn On LED\n\n6\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?button6off\\\"\\\"\nTurn Off LED\n\n6\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\n/* client.println(\"\na href=\\\"/?7on\\\"\\\"\nTurn On LED\n\n7\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?7off\\\"\\\"\nTurn Off LED\n\n7\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\na href=\\\"/?8on\\\"\\\"\nTurn On LED 8\n/a\n\");\n\n\nclient.println(\"\na href=\\\"/?8off\\\"\\\"\nTurn Off LED\n\n8\n/a\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\n*/\n\n\nclient.println(\"\np\nBased on a sketch \");\n\n\nclient.println(\"\np\nCreated by Rui Santos. Visit\n\n\nhttp://randomnerdtutorials.com\n for more projects!\n/p\n\");\n\n\nclient.println(\"\nbr /\n\");\n\n\nclient.println(\"\n/BODY\n\");\n\n\nclient.println(\"\n/HTML\n\");\n\n\ndelay(1);\n\n\n//stopping client\n\n\nclient.stop();\n\n\n//controls the Arduino if you press the buttons\n\n\nif (readString.indexOf(\"?button1on\") \n0){\n\n\ndigitalWrite(2, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button1off\") \n0){\n\n\ndigitalWrite(2, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button2on\") \n0){\n\n\ndigitalWrite(3, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button2off\") \n0){\n\n\ndigitalWrite(3, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button3on\") \n0){\n\n\ndigitalWrite(4, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button3off\") \n0){\n\n\ndigitalWrite(4, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button4on\") \n0){\n\n\ndigitalWrite(5, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button4off\") \n0){\n\n\ndigitalWrite(5, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button5on\") \n0){\n\n\ndigitalWrite(6, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button5off\") \n0){\n\n\ndigitalWrite(6, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button6on\") \n0){\n\n\ndigitalWrite(7, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button6off\") \n0){\n\n\ndigitalWrite(7, LOW);\n\n\n}\n\n\n/*\n\n\nif (readString.indexOf(\"?7on\") \n0){\n\n\ndigitalWrite(8, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?7off\") \n0){\n\n\ndigitalWrite(8, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?8on\") \n0){\n\n\ndigitalWrite(9, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?8off\") \n0){\n\n\ndigitalWrite(9, LOW);\n\n\n}\n\n\n*/\n\n\n//clearing string for next read\n\n\nreadString=\"\";\n\n\n}\n\n\n}\n\n\n}\n\n\n}\n\n\n}\n\n\nThis time, it makes a \u201creal\u201d web page with buttons that will turn on or\n\noff LEDs\n\n\n(a personal note: I was only able to get PINs 2 to 7 to work and I\u2019m not\n\nsure why as the code is the same for all the other LEDs)\n\n\nYou might take notice that when a button is pushed the URL will look\n\nvery much like the 1st example we looked at.\n\n\nhttp://192.168.1.178/?button1on\n\n\nAlso I didn\u2019t add anything to read the analog pins - but it would be\n\neasy to add something that could read a tempature sensor or some other\n\nsensor.\n\n\nUsing these examples we can do just about anything with control over\n\nethernet.\n\n\nThou there seems to be a limit to just what the web server can do.\n\n\n*** BONUS *** BONUS *** BONUS ***\n\n\nI2C 0.96\" OLED display module\n\n\nOLED\n\n\nnoun\n\n\nnoun: \nOLED\n; plural noun: \nOLEDs\n\n\n\n\na light-emitting diode containing thin flexible sheets of an organic\n\n\n\n\n\n\nelectroluminescent material, used for visual displays.\n\n\n\n\n\n\n\"because OLEDs emit light, they consume significantly less power\"\n\n\n\n\nhttp://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0\nhash=item3a90bcabba\n\n\nA few example sketches can be found here\n\n\nhttp://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29\n\n\nhttp://www.adafruit.com/product/326\n\n\nAnd the adafruit tutorial:\n\n\nhttps://learn.adafruit.com/monochrome-oled-breakouts\n\n\nTo make these examples work you need to have the Adafruit_SSD1306 and\n\nthe Adafruit_GFX libraries that can be found on github.\n\n\nThere is also this library that works:\n\n\nhttps://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD\n\n\nI have examples using both libraries.\n\n\nLike \u201cFAKE CLOCK\u201d using the MicroLCD library\n\n\n/*************************************************************************\n\n\n* Demo sketch for MicroLCD library\n\n\n* Distributed under GPL v2.0\n\n\n* Copyright (c) 2013-2014 Stanley Huang\n\n\nstanleyhuangyc@gmail.com\n\n\n* All rights reserved.\n\n\n* For more information, please visit \nhttp://arduinodev.com\n\n\n*************************************************************************/\n\n\n#include \nArduino.h\n\n\n#include \nWire.h\n\n\n#include \nMicroLCD.h\n\n\nint s = 0;\n\n\nint m = 0;\n\n\nint h = 12;\n\n\n//LCD_SH1106 lcd; /* for SH1106 OLED module */\n\n\nLCD_SSD1306 lcd; /* for SSD1306 OLED module */\n\n\nconst PROGMEM uint8_t smile[48 * 48 / 8] = {\n\n\n0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,\n\n\n0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00,\n\n\n0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n\n\n0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,\n\n\n0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00,\n\n\n0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,\n\n\n};\n\n\nvoid setup()\n\n\n{\n\n\nlcd.begin();\n\n\n}\n\n\nvoid loop()\n\n\n{\n\n\nlcd.clear();\n\n\nlcd.setCursor(40, 1);\n\n\nlcd.draw(smile, 48, 48);\n\n\ndelay(1000);\n\n\nlcd.clear();\n\n\nlcd.setCursor(25,1);\n\n\nlcd.setFontSize(FONT_SIZE_MEDIUM);\n\n\nlcd.print(\"FAKE Clock\");\n\n\ndelay(1500);\n\n\nfor (h = 1; h\n12; h++) {\n\n\nfor (m = 0; m\n59; m++) {\n\n\nfor (s = 0; s\n59; s++) {\n\n\nlcd.clear();\n\n\nlcd.setCursor(35, 3);\n\n\nlcd.setFontSize(FONT_SIZE_MEDIUM);\n\n\nlcd.print(h);\n\n\nlcd.print(\":\");\n\n\nif (m \n 10) {lcd.print(0);\n\n\nlcd.print(m); } else {lcd.print(m);}\n\n\nlcd.print(\":\");\n\n\nif (s \n 10) {lcd.print(0);\n\n\nlcd.print(s); } else {lcd.print(s);}\n\n\nlcd.print(\"P\");\n\n\nlcd.setCursor(20, 6);\n\n\nlcd.print(\"Nov 9, 2014\");\n\n\ndelay(1000);\n\n\n}\n\n\n}}}\n\n\nBoth libraries are pretty easy to use, and following the examples given\n\npretty easy to modify\n\n\nSome tricky things to get right is the number of pixels and placement of\n\nthe \u201ccursor\u201d on the screen.\n\n\nBut one you have done a few you get the hang of where it will be.", 
            "title": "Pin Control over Ethernet w/OLED"
        }, 
        {
            "location": "/projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/README/#i2c-096-oled-display-module", 
            "text": "OLED  noun  noun:  OLED ; plural noun:  OLEDs   a light-emitting diode containing thin flexible sheets of an organic    electroluminescent material, used for visual displays.    \"because OLEDs emit light, they consume significantly less power\"   http://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0 hash=item3a90bcabba  A few example sketches can be found here  http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29  http://www.adafruit.com/product/326  And the adafruit tutorial:  https://learn.adafruit.com/monochrome-oled-breakouts  To make these examples work you need to have the Adafruit_SSD1306 and \nthe Adafruit_GFX libraries that can be found on github.  There is also this library that works:  https://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD  I have examples using both libraries.  Like \u201cFAKE CLOCK\u201d using the MicroLCD library  /*************************************************************************  * Demo sketch for MicroLCD library  * Distributed under GPL v2.0  * Copyright (c) 2013-2014 Stanley Huang  stanleyhuangyc@gmail.com  * All rights reserved.  * For more information, please visit  http://arduinodev.com  *************************************************************************/  #include  Arduino.h  #include  Wire.h  #include  MicroLCD.h  int s = 0;  int m = 0;  int h = 12;  //LCD_SH1106 lcd; /* for SH1106 OLED module */  LCD_SSD1306 lcd; /* for SSD1306 OLED module */  const PROGMEM uint8_t smile[48 * 48 / 8] = {  0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00,  0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,  0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,  };  void setup()  {  lcd.begin();  }  void loop()  {  lcd.clear();  lcd.setCursor(40, 1);  lcd.draw(smile, 48, 48);  delay(1000);  lcd.clear();  lcd.setCursor(25,1);  lcd.setFontSize(FONT_SIZE_MEDIUM);  lcd.print(\"FAKE Clock\");  delay(1500);  for (h = 1; h 12; h++) {  for (m = 0; m 59; m++) {  for (s = 0; s 59; s++) {  lcd.clear();  lcd.setCursor(35, 3);  lcd.setFontSize(FONT_SIZE_MEDIUM);  lcd.print(h);  lcd.print(\":\");  if (m   10) {lcd.print(0);  lcd.print(m); } else {lcd.print(m);}  lcd.print(\":\");  if (s   10) {lcd.print(0);  lcd.print(s); } else {lcd.print(s);}  lcd.print(\"P\");  lcd.setCursor(20, 6);  lcd.print(\"Nov 9, 2014\");  delay(1000);  }  }}}  Both libraries are pretty easy to use, and following the examples given \npretty easy to modify  Some tricky things to get right is the number of pixels and placement of \nthe \u201ccursor\u201d on the screen.  But one you have done a few you get the hang of where it will be.", 
            "title": "I2C 0.96\" OLED display module"
        }, 
        {
            "location": "/projects/arduino/arduino-project-skynet-im/README/", 
            "text": "20140611 SKYNET.IM\n\n\nYup, the terminators are coming, Chris Matthieu along with a few others\nhave been working on machine to machine messaging. I\u2019ve been giving\nChris a hard time about the robots coming back, he is making it\nhappen!!! Seriously thou, Skynet is a fairly easy to use set of\nprotocols for talking to any machine. Chris has (and I think mistakenly)\nsaid you don\u2019t need a CPU - What I think he means is you don\u2019t need a\ndesktop/laptop full sized computer (or for that matter a rPI,\nBeagleBone, or small computer) You do need a processor of some type - A\nmicrocontroller works well.\n\n\nSo what is Skynet? In a nutshell it\u2019s a simple way for machines to talk\nto each other.\n\n\nIt takes the Firmata protocols and builds on them to be used over\nwireless or ethernet.\n\n\nSO what is Firmata? It\u2019s a generic protocol for communicating with\nmicrocontrollers from software on a host computer.\n\nhttp://firmata.org\n\n\nI haven\u2019t gotten into the firmata implitations of skynet yet, and that\nmaybe something for a later meeting.\n\n\nWith Skynet, every machine generates it\u2019s own UUID and API codes, they\ncan be overwritten if you need to. The programs/api use these UUID and\ncodes to talk to each other. You can name them, but the machines will\nstill use the UUID.\n\n\nGoing to verify this at the library, but it seems once connected, the\nmachines UUID stay with them, making it easy on us humans, and at least\neasy enough that we don\u2019t have to change our code everytime we plug in\nthe device.\n\n\nThere is a web impliation of skynet using google chrome and something\ncalled NodeBlu which is based from something called NodeRed.\n\n\nNodeBlu, is a connector, it really is easy to pull blocks down and\nconnect them to other blocks to have a remote device do something.\n\n\nBut the real power of skynet comes from the API, using simple restFUL\ncommands, someone can control the remote device from the command line.\nOR Two skynet connected devices can connect to each other and decide\nwhat to do.\n\n\nChris has a number of videos on Skynet,\n\nhttps://www.youtube.com/channel/UCBMdqdAbjJjE9LvMjVpiwUw\n\n\nI was watching a few of his videos to get ideas on what to demo, and\ncame across one where he could call (on his phone) his connected devices\n- this is very cool when it comes to automation. Think about it, if I\ncould call Skynet, say \u201cI\u2019ll be home in 10 minutes unlock the door\u201d and\nI had a door that could be remotely unlocked, in 10 minutes the door\nwould open. Using that same idea you could text your home and ask for a\nstatus update. All very easy to do.\n\n\nSo My demo is going to be on the \u201cEcho\u201d sketch that is included with the\nSkynet-Arduino-Firmware Library Created by Jacob Rosenthal\n\nhttps://github.com/skynetim/skynet_firmware_arduino\n\n\nJacob also has several other skynet librarys in his \u201cskynet\u201d github\n\nhttps://github.com/skynetim\n\n\nAnother developer/contributor to Skynet is Luis Montes (monteslu)- He\nhas worked on the Skynet Firmata and he has some librarys on github as\nwell. \nhttps://github.com/monteslu\n\n\nI can tell you that I\u2019ve \u201cspoke\u201d well chatted with all three of these\npeople over the past couple of weeks and all are very knowledgable and\nhelpful on skynet and how it works.\n\n\nIn fact a few of the issues I had at first with NodeBlu Luis said he\ncould fix or try to fix so it was a little more clear as to what is\nneeded.\n\n\nBut wait I was talking about my demo - It\u2019s the \u201cEcho\u201d sketch, and at\nfirst it wasn\u2019t clear to me what this sketch did. BUT Simply if you send\na message to it, it will \u201cEcho\u201d that message back to you.\n\n\nUsing NodeBlu, I was able to setup something that I could either speak\nto it, google would use it\u2019s speech to text engine and send the message\non to the machine (arduino), a couple of seconds later the arduino would\nsend back the text and google would use the text to speech engine and\nspeak what I said. Yes, I know, all of that could have been done quickly\nand easier with sending the text to the machine, but it\u2019s a demo of what\ncan be done. This is using the stock \u201cEcho\u201d sketch and a NodeBlu program\nthat I built.\n\n\nI can also just type a message into the NodeBlu program and that will\nget sent to the arduino, and come back and speak.\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\nMy 2nd demo of Skynet, I have hooked up a DS1620 temperature sensor\n(Which seems off to me today it\u2019s saying it\u2019s 82 degrees in here, seems\nhigh, maybe because the library was written for a UNO and I\u2019m using it\non a mega) doesn\u2019t matter, it\u2019s a concept. I\u2019m using the same NodeBlu\nprogram, but this time, anything I say, or ask for it will speak the\ntemperature to me.\n\n\nSo you might be looking at the NodeBlu program above and wondering what\nis going on?\n\n\nThere are two parts to this, (maybe three), the first step is to setup\nyour remote devices, Called NODES - You can name these devices anything\nyou want, the name isn\u2019t important as it\u2019s for us humans anyways. But\nyou will need the device UUID and the Token (on the Arduino you can get\nboth these from the serial monitor)\n\n\nNext you drag some blocks over to the workspace - most of the blocks are\nself explanatory as to what they do, some are inputs and some are\noutputs, and some are both. (So if the connector is on the right side\nit\u2019s an input, if it\u2019s on the left side it\u2019s an output, and on both\nsides well it\u2019s both) There are two blocks that aren\u2019t so self\nexplanatory, they are the Function block, and the switch block. So the\nfunction block will allow you to write some Java script functions that\ncan change the course of the program on the NodeBlu side of things.\n\n\nRemember it\u2019s looking for JAVA - which is a little different, and threw\nme for a bit as too way things weren\u2019t working. Right now there is\nnothing that tells you there is an error, and this one of the things\nthat Luis thought he could fix. The switch block is an kind of like a IF\nstatement block, you can add multiply paths for the output to go to. In\nmy example you can see 5 different directions the output can go.\n\n\nSo that is just briefly what Skynet is, and what it can do, The\nunfortunate part is the guys that created this are programmers by\nprofession, and they didn\u2019t do such a good job in my opinion documenting\nthings, And for someone who is just starting programming, or someone who\nhas never used a API this might be a real struggle. I have used APIs and\nbeen programming for a while now and I found at least parts of it to be\nconfusing, I\u2019d consider myself to be an intermediate level programmer,\nnothing these guys can do. It\u2019s an old problem with us programer types -\nwe understand and know how it works, and don\u2019t think about what the end\nuser knows or the skill level they might be at. Happens all the time.\nThe best thing I can say is the guys on Chris\u2019s team are very\nknowledgable, and do understand what is going on, and are very helpful.\n(Twitter is probably the best way to get them, I know that Chris watches\nboth Twitter and G+ most of the day)\n\n\nRelease the Robots!\n\n\nModified Skynet.im Echo sketch to include DS1620 Temp Sensor:\n\n\n*\n\n\n* SSSSS kk tt\n\n\n* SS kk kk yy yy nn nnn eee tt\n\n\n* SSSSS kkkkk yy yy nnn nn ee e tttt\n\n\n* SS kk kk yyyyyy nn nn eeeee tt\n\n\n* SSSSS kk kk yy nn nn eeeee tttt\n\n\n* yyyyy\n\n\n*\n\n\n* SkynetClient for http://skynet.im, OPEN COMMUNICATIONS NETWORK \n API\nFOR\n\n\n* THE INTERNET OF THINGS.\n\n\n*\n\n\n* This sketch parses any messages it receives and echos them back to\nthe\n\n\n* sender.\n\n\n*\n\n\n* Works with ethernet shields compatible with EthernetClient library\nfrom\n\n\n* Arduino. If you don't know, grab the original\n\n\n* http://arduino.cc/en/Main/ArduinoEthernetShield\n\n\n*\n\n\n* Also requires the ArduinoJsonParser\n\n\n* https://github.com/bblanchon/ArduinoJsonParser\n\n\n*\n\n\n* You will notice we're using F() in Serial.print which might be new to\nyou\n\n\n* Its covered briefly on the arduino print page but it means we can\nstore\n\n\n* our strings in flash, instead of in ram.\n\n\n*\n\n\n* You can turn on debugging within SkynetClient.h by uncommenting\n\n\n* #define SKYNETCLIENT_DEBUG\n\n\n*/\n\n\n#include \nEEPROM.h\n\n\n#include \"Ethernet.h\"\n\n\n#include \"SPI.h\"\n\n\n#include \"SkynetClient.h\"\n\n\n#include \nJsonParser.h\n\n\n#include \nDS1620.h\n\n\n#include \nstdlib.h\n\n\nEthernetClient client;\n\n\nSkynetClient skynetclient(client);\n\n\n//you can't have 2 of the same mac on your network!\n\n\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\n\n\nchar hostname[] = \"skynet.im\";\n\n\nint port = 80;\n\n\nstatic const uint8_t RST_PIN = 7;\n\n\nstatic const uint8_t CLK_PIN = 8;\n\n\nstatic const uint8_t DQ_PIN = 9;\n\n\nDS1620 ds1620(RST_PIN, CLK_PIN, DQ_PIN);\n\n\nvoid setup()\n\n\n{\n\n\npinMode(8, OUTPUT);\n\n\nSerial.begin(9600);\n\n\ndelay(100);\n\n\nds1620.config();\n\n\n// start the Ethernet connection:\n\n\nif (Ethernet.begin(mac) == 0) {\n\n\nSerial.println(F(\"Failed to configure Ethernet using DHCP\"));\n\n\n// no point in carrying on, so do nothing forevermore:\n\n\nfor(;;)\n\n\n;\n\n\n}\n\n\nskynetclient.setMessageDelegate(onMessage);\n\n\n}\n\n\nvoid onMessage(const char * const data) {\n\n\nJsonParser\n16\n parser;\n\n\n//Serial.print(\"Parse \");\n\n\n//Serial.println(data);\n\n\nJsonHashTable hashTable = parser.parseHashTable((char*)data);\n\n\nif (!hashTable.success())\n\n\n{\n\n\nSerial.println(\"JsonParser.parseHashTable() failed\");\n\n\nreturn;\n\n\n}\n\n\nchar* payload = hashTable.getString(\"payload\");\n\n\n//Serial.print(\"payload=\");\n\n\nSerial.println(payload);\n\n\nchar* fromUuid = hashTable.getString(\"fromUuid\");\n\n\n//Serial.print(\"fromUuid=\");\n\n\n//Serial.println(fromUuid);\n\n\nconst float temp_c = ds1620.temp_c();\n\n\nconst float temp_f = temp_c * 9/5.0 + 32;\n\n\nSerial.print(temp_f, 1); // 1 decimal place\n\n\nSerial.print(\"F \");\n\n\nSerial.print(temp_c, 1);\n\n\nSerial.println(\"C\");\n\n\nString s = dtostrf(temp_f, 1, 2, payload);\n\n\nskynetclient.sendMessage(fromUuid, payload);\n\n\n}\n\n\nvoid loop() {\n\n\nwhile(!skynetclient.monitor()){\n\n\nbool skynetStatus = false;\n\n\ndo {\n\n\nskynetStatus = skynetclient.connect(hostname, port);\n\n\n} while (!skynetStatus);\n\n\nSerial.println(F(\"Connected!\"));\n\n\nchar uuid[UUIDSIZE];\n\n\nskynetclient.getUuid(uuid);\n\n\nSerial.print(F(\"uuid: \"));\n\n\nSerial.println(uuid);\n\n\nskynetclient.getToken(uuid);\n\n\nSerial.print(F(\"token: \"));\n\n\nSerial.println(uuid);\n\n\n}\n\n\n}\n\n\nSo you\u2019ll see it doesn\u2019t matter what you send to it, it will send the\ntemperature back everytime - you can be really impressive thou and say\n\u201cWhat is the Temerature\u201d to fool people.\n\n\nSimple prove of concept sketch, and a good demo", 
            "title": "Skynet IM"
        }, 
        {
            "location": "/projects/arduino/arduino-project-the-spo-512-speech-synthesizer/README/", 
            "text": "3/16/2014 The SPO-512 Speech Synthesizer\n\n\n1. Project Reference Number / Title:\n\n\n\n\n\n\n20140316 The SPO-512 Speech Synthesizer\n\n\n\n\n\n\nMar 16 - 17, 2014\n\n\nA side project this week, The SPO-512 Speech Synthesizer also known as\nthe RoboVoice from SpeechChips.com\n\nhttp://www.speechchips.com/shop/item.aspx?itemid=22\n\n\nThis is a PIC microcontroller that takes a serial 9600 baud input (ASCII\ndata) and outputs (speaks) VOICE, There are a couple of demos of this on\nthe website. I bought the chip probably 2 years ago, and it sat on my\ndesk. There is a design circuit in the PDF on the site, turns out most\nof the circuit is an amplifier for the speaker, the circuit to make this\nwork is really pretty simple. 4 grounds, and 4 3.3v power - a TX line, a\nRX line, a Cap for filtering (I think, left it off and it didn\u2019t sound\nas good, I also didn\u2019t have the 4.7u cap that is called for, I used a\n10u, seems to be fine so I think it is just filtering) and an output to\nthe speaker.\n\n\nI have a lot of parts that I pulled out of old computers, turns out a\nfew of the dell systems have little tiny amplified speakers build in\nthem, these things work great, and I wish I would have pulled more out.\nI am running my little speaker off 5v, but I wonder if it wasn\u2019t hooked\nup to 12v in the computer - seems like they were much louder. Doesn\u2019t\nmatter it works, and I think it will work at 3.3v as well.\n\n\nI think I\u2019ve talked to the man who invented this chip, I think he is\nvery active in the \u201cBasic Stamp\u201d forums, and very knowledgable about all\nthings microchip.\n\n\nSpeech chips offered a robovoice on an arduino shield, I don\u2019t think\nthey do any more. So after I went from breadboard, I moved the whole\nthing over to a proto board, (well the speaker isn\u2019t mounted, I really\nwanted to mount it, but\u2026)\n\n\nSo here are a few pictures of my side project, and I\u2019ll bring it with me\nto the meeting on Thurs.\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\nIt took a couple of hours to move it from breadboard to proto board, and\nI ran into a couple of issues, the 1st, the chip is 28 pin, the board\nonly had enough multi-tap pins for a 20 pin microchip, (Issue was fairly\neasy to overcome). 2nd my proto board didn\u2019t give any tap to the 3.3v\nline of the arduino, in fact it was shorted to the 5v line (Huh?) Yeah\nthat was a mistake from the manufacturer I am sure, but I can see how\nsomeone not paying attention could short out the Arduino board. This\nproto board provide 3 different 5v rails, and 3 different ground rails,\n(one set of those rails ended up being UNDER the IC chip and not at all\nin a useful spot), No 3.3v rail, I had to make my own. but that ended up\ntaking up more room on the board then really needed. I could have done\nwithout one of the 5v rails for a replacement of a 3.3v rail, probably\nwould have had to move the IC but I could have dealt with that.\n\n\nMy last issue was - this proto board had stackable header on it. I\nwanted to make this semi-permanent so I didn\u2019t want to plug a wire into\nthe header, I wanted to use the port directly. I had to remove the most\nof the headers which caused another problem, it was a little hard to\nremove the headers, and the holes closed behind being removed, for some\nreason my solider sucker just wasn\u2019t working well tonight.\n\n\nOver all thou, this was a fun project, now I just need to order a couple\nmore protoboards for the next time I want to move off breadboarding.", 
            "title": "SPO-512 Speech Synthesizer"
        }, 
        {
            "location": "/projects/esp8266/", 
            "text": "", 
            "title": "Temp"
        }, 
        {
            "location": "/projects/other/project-hot-wheels-10-525ghz-radar-gun/README/", 
            "text": "20140525 - Hot Wheels 10.525ghz radar gun - Update #2\n\n\nhttp://www.edparadis.com/radar/\n\n\nThe above website takes apart one of the Hot Wheels radar guns, and has\nsome great pictures of the components. Something that you might notice\nis that the gun itself is very much like the little gun we have. The\nbiggest difference is it\u2019s in a waveguide that helps to direct where the\nradar signal goes. But otherwise it is very much like what we have.\n\n\nOne other thing you\u2019ll notice is that he also had to add an amplifier to\nget a signal he could use, I believe that there is an amp on the\n\u201ccontrol board\u201d but it may not have been easy to access that.\n\n\nYou\u2019ll also note that his IF is also in the 10Hz to 150Hz range, which\nmakes believe the hot wheels gun is using the HB100 or at least\nsomething that is very close to it.\n\n\nThere are quite a few projects that are using the Hot Wheels gun,\nincluding a Weather Radar (well sort of),\n\n\nhttps://instruct1.cit.cornell.edu/Courses/ee476/FinalProjects/s2009/cdl32_mjc89/cdl32_mjc89/index.html\n\n\nDoes make me wonder if we could use what we have an mirror the above\nproject, looks like it might be a big project.\n\n\nAnd here\u2019s someone that \u201cmade\u201d a speed gun out of the Hot Wheels radar\ngun (What, this is already a speed gun???)\n\n\nhttp://makezine.com/projects/radar-speed-detector/\n\n\nTo make a real gun, we need more power which we are limited to using\nthis unit. But we might beable to focus the waves better using something\nlike this: It\u2019s a 10ghz (X-band) radar cone, it\u2019s tuned for the X-Band,\nand will direct the waves much better. This is very much like what is in\na commercial radar gun (IF the cops were still using X-Band)\n\n\nIt\u2019s still not going to be perfect, not with this unit, but it will be\nbetter.\n\n\nhttp://www.ebay.com/itm/10-GHZ-X-BAND-17-DB-GAIN-HORN-ANTENNA-MA86551-NEW-/141295562369?pt=US_Radio_Comm_Antennas\nhash=item20e5df2e81\n\n\nI would like to try to tune the gun, but for that we need tuning forks\n(Any should work, I think) as long as we know at what Hz they vibrate.\n(IE: a fork vibrating at 200Hz should be about 6.3 or 6.4 MPHs Hz/31.36\n= MPH) Short of having any tuning forks there is no sure way to know\nthat what we are doing is working correctly or not.\n\n\nOne Idea I have is to roll a hot wheels car, see what the hot wheels\nguns says, and then roll it again and see what our gun says. Hopefully\nthey will be the same or close to the same - But that method has a\nproblem that is the push was a little more or a little less then results\nwould be a little different.\n\n\nSO if anyone has any tuning forks that we know the vibration of bring\nthem to this Thursdays meeting and we will see if we can figure out!", 
            "title": "Hot Wheels 10.524Ghz Radar Gun"
        }, 
        {
            "location": "/herojr/", 
            "text": "Nothing Here Yet", 
            "title": "Hero Jr Robot"
        }, 
        {
            "location": "/herojr/#nothing-here-yet", 
            "text": "", 
            "title": "Nothing Here Yet"
        }, 
        {
            "location": "/document/", 
            "text": "Documenting Arduino Projects {#arduino-projects}\n\n\nCame across this site a few days ago, it builds websites from \nMark Down\n text.\n\n\nThe sites can then be uploaded to github and make good documentation.\n\n\nhttp://www.mkdocs.org/\n\n\nHere is just a \ndemo/test\n site I made in about 3 mins and pushed to github.\n\n\nhttp://kd8bxp.github.io/Arduino-Projects/\n\n\n(I am in the process of updating this with all of the projects here)\n\n\nMaking the \nmark down\n text is easy, and the mkdoc app makes it look nice!\n\n\nhttps://guides.github.com/features/mastering-markdown/\n\n\nMkdocs - \nMark Down\n -\n\n\nhttp://www.mkdocs.org/user-guide/configuration/\n\n\nMake Docs is a fast, simple static site generator, that\u2019s geared towards building project documentation.\n\n\nWritten in Markdown, and configured with a single YAML configuration file.\n\n\nEasy to use, and fast to generate a professional looking site with documents.\n\n\nProjects hosted on github, \u201ccome with\u201d pages - and the files generated by Mkdocs can be used as these pages.\n\n\nhttps://pages.github.com/\n\n\nMkdocs even makes it easy to push (while it\u2019s creating) the documents to github.\n\n\nhttp://www.mkdocs.org/#deploying\n\n\nIf you don\u2019t want to use Github to host your documents - that\u2019s ok too, the site generated is static, and should work on anything that can host a site (I didn\u2019t have much luck getting to work with google sites thou)\n\n\nThis site directly supports documents from github and others:\n\n\nhttps://readthedocs.org/\n\n\nGit hub has a 3 min (read) tutorial on using \u201cGithub Markdown\u201d\n\n\nhttps://guides.github.com/features/mastering-markdown/\n\n\nand mkdocs has some additional things specifically for it:\n\n\nhttp://www.mkdocs.org/user-guide/configuration/\n\n\nAs I said once before there is also something called: Gitbook\n\n\nwhich can generate books from various types of files, Markdown is one.\n\n\nhttp://www.gitbook.com\n\n\nThere are a couple (more than a couple) online Word (and others) coverters that will convert a file to markdown. Mkdocs can use those files to build a website.\n\n\nHere are a couple I tried:\n\n\nhttp://word-to-markdown.herokuapp.com/\n\n\nhttp://dillinger.io/\n\n\nWIKIs are another alternative for Documentation projects:\n\n\nHere are a few that have free accounts, I\u2019ve not tried any of them.\n\n\nhttps://wiki.wiki/\n\n\nhttps://meta.miraheze.org/wiki/Miraheze\n\n\nhttp://tiddlyspot.com/\n\n\nhttp://www.shoutwiki.com/w/index.php?title=Special%3ASearch\nsearch=arduino\nfulltext=\n\n\nGoogle Sites also has a couple of templates that are good for documenting.\n\n\nHere are a couple of DEMO sites I made - and to make changes to them is easy in the online editor:\n\n\nhttps://sites.google.com/site/demokd8bxp/\n (good basic site)\n\n\nhttps://sites.google.com/site/kd8bxpwiki/\n (Much like a wiki, and easy to add, change and update)", 
            "title": "Document Projects"
        }, 
        {
            "location": "/document/#documenting-arduino-projects-arduino-projects", 
            "text": "Came across this site a few days ago, it builds websites from  Mark Down  text.  The sites can then be uploaded to github and make good documentation.  http://www.mkdocs.org/  Here is just a  demo/test  site I made in about 3 mins and pushed to github.  http://kd8bxp.github.io/Arduino-Projects/  (I am in the process of updating this with all of the projects here)  Making the  mark down  text is easy, and the mkdoc app makes it look nice!  https://guides.github.com/features/mastering-markdown/  Mkdocs -  Mark Down  -  http://www.mkdocs.org/user-guide/configuration/  Make Docs is a fast, simple static site generator, that\u2019s geared towards building project documentation.  Written in Markdown, and configured with a single YAML configuration file.  Easy to use, and fast to generate a professional looking site with documents.  Projects hosted on github, \u201ccome with\u201d pages - and the files generated by Mkdocs can be used as these pages.  https://pages.github.com/  Mkdocs even makes it easy to push (while it\u2019s creating) the documents to github.  http://www.mkdocs.org/#deploying  If you don\u2019t want to use Github to host your documents - that\u2019s ok too, the site generated is static, and should work on anything that can host a site (I didn\u2019t have much luck getting to work with google sites thou)  This site directly supports documents from github and others:  https://readthedocs.org/  Git hub has a 3 min (read) tutorial on using \u201cGithub Markdown\u201d  https://guides.github.com/features/mastering-markdown/  and mkdocs has some additional things specifically for it:  http://www.mkdocs.org/user-guide/configuration/  As I said once before there is also something called: Gitbook  which can generate books from various types of files, Markdown is one.  http://www.gitbook.com  There are a couple (more than a couple) online Word (and others) coverters that will convert a file to markdown. Mkdocs can use those files to build a website.  Here are a couple I tried:  http://word-to-markdown.herokuapp.com/  http://dillinger.io/  WIKIs are another alternative for Documentation projects:  Here are a few that have free accounts, I\u2019ve not tried any of them.  https://wiki.wiki/  https://meta.miraheze.org/wiki/Miraheze  http://tiddlyspot.com/  http://www.shoutwiki.com/w/index.php?title=Special%3ASearch search=arduino fulltext=  Google Sites also has a couple of templates that are good for documenting.  Here are a couple of DEMO sites I made - and to make changes to them is easy in the online editor:  https://sites.google.com/site/demokd8bxp/  (good basic site)  https://sites.google.com/site/kd8bxpwiki/  (Much like a wiki, and easy to add, change and update)", 
            "title": "Documenting Arduino Projects {#arduino-projects}"
        }, 
        {
            "location": "/leroy/", 
            "text": "301 Moved Permanently\n\n\n\n\n301 Moved Permanently\n\n\nLeRoy", 
            "title": "About"
        }, 
        {
            "location": "/leroy/#301-moved-permanently", 
            "text": "301 Moved Permanently  LeRoy", 
            "title": "301 Moved Permanently"
        }
    ]
}